/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNTurboLndSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_start(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->start(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletBalance(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletBalance(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_channelBalance(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->channelBalance(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getTransactions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getTransactions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_estimateFee(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->estimateFee(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendCoins(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendCoins(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listUnspent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listUnspent(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeTransactions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeTransactions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendMany(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendMany(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_newAddress(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->newAddress(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signMessage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_verifyMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->verifyMessage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_connectPeer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->connectPeer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_disconnectPeer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->disconnectPeer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listPeers(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listPeers(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribePeerEvents(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribePeerEvents(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getRecoveryInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getRecoveryInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_pendingChannels(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->pendingChannels(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listChannels(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listChannels(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeChannelEvents(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeChannelEvents(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_closedChannels(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->closedChannels(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_openChannelSync(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->openChannelSync(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_openChannel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->openChannel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_batchOpenChannel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->batchOpenChannel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_fundingStateStep(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->fundingStateStep(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_channelAcceptor(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->channelAcceptor(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_closeChannel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->closeChannel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_abandonChannel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->abandonChannel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendPayment(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendPayment(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendPaymentSync(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendPaymentSync(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendToRoute(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendToRoute(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendToRouteSync(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendToRouteSync(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_addInvoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->addInvoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listInvoices(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listInvoices(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_lookupInvoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->lookupInvoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeInvoices(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeInvoices(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_decodePayReq(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->decodePayReq(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listPayments(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listPayments(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_deletePayment(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->deletePayment(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_deleteAllPayments(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->deleteAllPayments(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_describeGraph(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->describeGraph(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getNodeMetrics(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getNodeMetrics(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getChanInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getChanInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getNodeInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getNodeInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_queryRoutes(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->queryRoutes(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getNetworkInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getNetworkInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_stopDaemon(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->stopDaemon(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeChannelGraph(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeChannelGraph(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_debugLevel(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->debugLevel(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_feeReport(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->feeReport(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_updateChannelPolicy(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->updateChannelPolicy(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_forwardingHistory(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->forwardingHistory(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_exportChannelBackup(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->exportChannelBackup(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_exportAllChannelBackups(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->exportAllChannelBackups(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_verifyChanBackup(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->verifyChanBackup(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_restoreChannelBackups(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->restoreChannelBackups(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeChannelBackups(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeChannelBackups(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_bakeMacaroon(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->bakeMacaroon(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listMacaroonIDs(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listMacaroonIDs(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_deleteMacaroonID(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->deleteMacaroonID(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listPermissions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listPermissions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_checkMacaroonPermissions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->checkMacaroonPermissions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_registerRPCMiddleware(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->registerRPCMiddleware(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_sendCustomMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->sendCustomMessage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeCustomMessages(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeCustomMessages(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_listAliases(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->listAliases(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_lookupHtlcResolution(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->lookupHtlcResolution(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_genSeed(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->genSeed(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_initWallet(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->initWallet(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_unlockWallet(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->unlockWallet(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_changePassword(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->changePassword(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_subscribeState(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->subscribeState(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_getState(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->getState(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_autopilotStatus(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->autopilotStatus(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_autopilotModifyStatus(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->autopilotModifyStatus(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_autopilotQueryScores(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->autopilotQueryScores(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_autopilotSetScores(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->autopilotSetScores(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_chainNotifierRegisterConfirmationsNtfn(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->chainNotifierRegisterConfirmationsNtfn(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_chainNotifierRegisterSpendNtfn(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->chainNotifierRegisterSpendNtfn(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_chainNotifierRegisterBlockEpochNtfn(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->chainNotifierRegisterBlockEpochNtfn(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_invoicesSubscribeSingleInvoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->invoicesSubscribeSingleInvoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_invoicesCancelInvoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->invoicesCancelInvoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_invoicesAddHoldInvoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->invoicesAddHoldInvoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_invoicesSettleInvoice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->invoicesSettleInvoice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_invoicesLookupInvoiceV2(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->invoicesLookupInvoiceV2(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitStatus(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitStatus(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitAddPeer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitAddPeer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitDisconnectPeer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitDisconnectPeer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitIsBanned(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitIsBanned(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetBlockHeader(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitGetBlockHeader(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetBlock(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitGetBlock(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetCFilter(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitGetCFilter(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetBlockHash(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->neutrinoKitGetBlockHash(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_peersUpdateNodeAnnouncement(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->peersUpdateNodeAnnouncement(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerSendPaymentV2(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerSendPaymentV2(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerTrackPaymentV2(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerTrackPaymentV2(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerTrackPayments(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerTrackPayments(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerEstimateRouteFee(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerEstimateRouteFee(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerSendToRoute(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerSendToRoute(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerSendToRouteV2(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerSendToRouteV2(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerResetMissionControl(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerResetMissionControl(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerQueryMissionControl(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerQueryMissionControl(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerXImportMissionControl(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerXImportMissionControl(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerGetMissionControlConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerGetMissionControlConfig(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerSetMissionControlConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerSetMissionControlConfig(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerQueryProbability(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerQueryProbability(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerBuildRoute(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerBuildRoute(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerSubscribeHtlcEvents(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerSubscribeHtlcEvents(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerSendPayment(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerSendPayment(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerTrackPayment(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerTrackPayment(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerHtlcInterceptor(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerHtlcInterceptor(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asFunction(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asFunction(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_routerUpdateChanStatus(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->routerUpdateChanStatus(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerSignOutputRaw(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerSignOutputRaw(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerComputeInputScript(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerComputeInputScript(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerSignMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerSignMessage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerVerifyMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerVerifyMessage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerDeriveSharedKey(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerDeriveSharedKey(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2CombineKeys(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerMuSig2CombineKeys(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2CreateSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerMuSig2CreateSession(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2RegisterNonces(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerMuSig2RegisterNonces(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2Sign(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerMuSig2Sign(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2CombineSig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerMuSig2CombineSig(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2Cleanup(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->signerMuSig2Cleanup(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_versionerGetVersion(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->versionerGetVersion(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListUnspent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitListUnspent(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitLeaseOutput(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitLeaseOutput(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitReleaseOutput(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitReleaseOutput(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListLeases(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitListLeases(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitDeriveNextKey(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitDeriveNextKey(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitDeriveKey(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitDeriveKey(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitNextAddr(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitNextAddr(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListAccounts(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitListAccounts(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitRequiredReserve(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitRequiredReserve(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListAddresses(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitListAddresses(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitSignMessageWithAddr(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitSignMessageWithAddr(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitVerifyMessageWithAddr(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitVerifyMessageWithAddr(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitImportAccount(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitImportAccount(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitImportPublicKey(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitImportPublicKey(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitImportTapscript(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitImportTapscript(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitPublishTransaction(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitPublishTransaction(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitSendOutputs(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitSendOutputs(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitEstimateFee(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitEstimateFee(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitPendingSweeps(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitPendingSweeps(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitBumpFee(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitBumpFee(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListSweeps(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitListSweeps(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitLabelTransaction(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitLabelTransaction(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitFundPsbt(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitFundPsbt(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitSignPsbt(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitSignPsbt(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_walletKitFinalizePsbt(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->walletKitFinalizePsbt(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerGetInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerGetInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientAddTower(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerClientAddTower(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientRemoveTower(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerClientRemoveTower(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientListTowers(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerClientListTowers(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientGetTowerInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerClientGetTowerInfo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientStats(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerClientStats(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientPolicy(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTurboLndCxxSpecJSI *>(&turboModule)->watchtowerClientPolicy(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}

NativeTurboLndCxxSpecJSI::NativeTurboLndCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("TurboLndModuleCxx", jsInvoker) {
  methodMap_["start"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_start};
  methodMap_["walletBalance"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletBalance};
  methodMap_["channelBalance"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_channelBalance};
  methodMap_["getTransactions"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getTransactions};
  methodMap_["estimateFee"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_estimateFee};
  methodMap_["sendCoins"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_sendCoins};
  methodMap_["listUnspent"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listUnspent};
  methodMap_["subscribeTransactions"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeTransactions};
  methodMap_["sendMany"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_sendMany};
  methodMap_["newAddress"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_newAddress};
  methodMap_["signMessage"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signMessage};
  methodMap_["verifyMessage"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_verifyMessage};
  methodMap_["connectPeer"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_connectPeer};
  methodMap_["disconnectPeer"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_disconnectPeer};
  methodMap_["listPeers"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listPeers};
  methodMap_["subscribePeerEvents"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribePeerEvents};
  methodMap_["getInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getInfo};
  methodMap_["getRecoveryInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getRecoveryInfo};
  methodMap_["pendingChannels"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_pendingChannels};
  methodMap_["listChannels"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listChannels};
  methodMap_["subscribeChannelEvents"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeChannelEvents};
  methodMap_["closedChannels"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_closedChannels};
  methodMap_["openChannelSync"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_openChannelSync};
  methodMap_["openChannel"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_openChannel};
  methodMap_["batchOpenChannel"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_batchOpenChannel};
  methodMap_["fundingStateStep"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_fundingStateStep};
  methodMap_["channelAcceptor"] = MethodMetadata {2, __hostFunction_NativeTurboLndCxxSpecJSI_channelAcceptor};
  methodMap_["closeChannel"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_closeChannel};
  methodMap_["abandonChannel"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_abandonChannel};
  methodMap_["sendPayment"] = MethodMetadata {2, __hostFunction_NativeTurboLndCxxSpecJSI_sendPayment};
  methodMap_["sendPaymentSync"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_sendPaymentSync};
  methodMap_["sendToRoute"] = MethodMetadata {2, __hostFunction_NativeTurboLndCxxSpecJSI_sendToRoute};
  methodMap_["sendToRouteSync"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_sendToRouteSync};
  methodMap_["addInvoice"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_addInvoice};
  methodMap_["listInvoices"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listInvoices};
  methodMap_["lookupInvoice"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_lookupInvoice};
  methodMap_["subscribeInvoices"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeInvoices};
  methodMap_["decodePayReq"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_decodePayReq};
  methodMap_["listPayments"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listPayments};
  methodMap_["deletePayment"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_deletePayment};
  methodMap_["deleteAllPayments"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_deleteAllPayments};
  methodMap_["describeGraph"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_describeGraph};
  methodMap_["getNodeMetrics"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getNodeMetrics};
  methodMap_["getChanInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getChanInfo};
  methodMap_["getNodeInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getNodeInfo};
  methodMap_["queryRoutes"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_queryRoutes};
  methodMap_["getNetworkInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getNetworkInfo};
  methodMap_["stopDaemon"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_stopDaemon};
  methodMap_["subscribeChannelGraph"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeChannelGraph};
  methodMap_["debugLevel"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_debugLevel};
  methodMap_["feeReport"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_feeReport};
  methodMap_["updateChannelPolicy"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_updateChannelPolicy};
  methodMap_["forwardingHistory"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_forwardingHistory};
  methodMap_["exportChannelBackup"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_exportChannelBackup};
  methodMap_["exportAllChannelBackups"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_exportAllChannelBackups};
  methodMap_["verifyChanBackup"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_verifyChanBackup};
  methodMap_["restoreChannelBackups"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_restoreChannelBackups};
  methodMap_["subscribeChannelBackups"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeChannelBackups};
  methodMap_["bakeMacaroon"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_bakeMacaroon};
  methodMap_["listMacaroonIDs"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listMacaroonIDs};
  methodMap_["deleteMacaroonID"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_deleteMacaroonID};
  methodMap_["listPermissions"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listPermissions};
  methodMap_["checkMacaroonPermissions"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_checkMacaroonPermissions};
  methodMap_["registerRPCMiddleware"] = MethodMetadata {2, __hostFunction_NativeTurboLndCxxSpecJSI_registerRPCMiddleware};
  methodMap_["sendCustomMessage"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_sendCustomMessage};
  methodMap_["subscribeCustomMessages"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeCustomMessages};
  methodMap_["listAliases"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_listAliases};
  methodMap_["lookupHtlcResolution"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_lookupHtlcResolution};
  methodMap_["genSeed"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_genSeed};
  methodMap_["initWallet"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_initWallet};
  methodMap_["unlockWallet"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_unlockWallet};
  methodMap_["changePassword"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_changePassword};
  methodMap_["subscribeState"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_subscribeState};
  methodMap_["getState"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_getState};
  methodMap_["autopilotStatus"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_autopilotStatus};
  methodMap_["autopilotModifyStatus"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_autopilotModifyStatus};
  methodMap_["autopilotQueryScores"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_autopilotQueryScores};
  methodMap_["autopilotSetScores"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_autopilotSetScores};
  methodMap_["chainNotifierRegisterConfirmationsNtfn"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_chainNotifierRegisterConfirmationsNtfn};
  methodMap_["chainNotifierRegisterSpendNtfn"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_chainNotifierRegisterSpendNtfn};
  methodMap_["chainNotifierRegisterBlockEpochNtfn"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_chainNotifierRegisterBlockEpochNtfn};
  methodMap_["invoicesSubscribeSingleInvoice"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_invoicesSubscribeSingleInvoice};
  methodMap_["invoicesCancelInvoice"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_invoicesCancelInvoice};
  methodMap_["invoicesAddHoldInvoice"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_invoicesAddHoldInvoice};
  methodMap_["invoicesSettleInvoice"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_invoicesSettleInvoice};
  methodMap_["invoicesLookupInvoiceV2"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_invoicesLookupInvoiceV2};
  methodMap_["neutrinoKitStatus"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitStatus};
  methodMap_["neutrinoKitAddPeer"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitAddPeer};
  methodMap_["neutrinoKitDisconnectPeer"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitDisconnectPeer};
  methodMap_["neutrinoKitIsBanned"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitIsBanned};
  methodMap_["neutrinoKitGetBlockHeader"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetBlockHeader};
  methodMap_["neutrinoKitGetBlock"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetBlock};
  methodMap_["neutrinoKitGetCFilter"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetCFilter};
  methodMap_["neutrinoKitGetBlockHash"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_neutrinoKitGetBlockHash};
  methodMap_["peersUpdateNodeAnnouncement"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_peersUpdateNodeAnnouncement};
  methodMap_["routerSendPaymentV2"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_routerSendPaymentV2};
  methodMap_["routerTrackPaymentV2"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_routerTrackPaymentV2};
  methodMap_["routerTrackPayments"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_routerTrackPayments};
  methodMap_["routerEstimateRouteFee"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerEstimateRouteFee};
  methodMap_["routerSendToRoute"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerSendToRoute};
  methodMap_["routerSendToRouteV2"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerSendToRouteV2};
  methodMap_["routerResetMissionControl"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerResetMissionControl};
  methodMap_["routerQueryMissionControl"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerQueryMissionControl};
  methodMap_["routerXImportMissionControl"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerXImportMissionControl};
  methodMap_["routerGetMissionControlConfig"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerGetMissionControlConfig};
  methodMap_["routerSetMissionControlConfig"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerSetMissionControlConfig};
  methodMap_["routerQueryProbability"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerQueryProbability};
  methodMap_["routerBuildRoute"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerBuildRoute};
  methodMap_["routerSubscribeHtlcEvents"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_routerSubscribeHtlcEvents};
  methodMap_["routerSendPayment"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_routerSendPayment};
  methodMap_["routerTrackPayment"] = MethodMetadata {3, __hostFunction_NativeTurboLndCxxSpecJSI_routerTrackPayment};
  methodMap_["routerHtlcInterceptor"] = MethodMetadata {2, __hostFunction_NativeTurboLndCxxSpecJSI_routerHtlcInterceptor};
  methodMap_["routerUpdateChanStatus"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_routerUpdateChanStatus};
  methodMap_["signerSignOutputRaw"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerSignOutputRaw};
  methodMap_["signerComputeInputScript"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerComputeInputScript};
  methodMap_["signerSignMessage"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerSignMessage};
  methodMap_["signerVerifyMessage"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerVerifyMessage};
  methodMap_["signerDeriveSharedKey"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerDeriveSharedKey};
  methodMap_["signerMuSig2CombineKeys"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2CombineKeys};
  methodMap_["signerMuSig2CreateSession"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2CreateSession};
  methodMap_["signerMuSig2RegisterNonces"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2RegisterNonces};
  methodMap_["signerMuSig2Sign"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2Sign};
  methodMap_["signerMuSig2CombineSig"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2CombineSig};
  methodMap_["signerMuSig2Cleanup"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_signerMuSig2Cleanup};
  methodMap_["versionerGetVersion"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_versionerGetVersion};
  methodMap_["walletKitListUnspent"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListUnspent};
  methodMap_["walletKitLeaseOutput"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitLeaseOutput};
  methodMap_["walletKitReleaseOutput"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitReleaseOutput};
  methodMap_["walletKitListLeases"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListLeases};
  methodMap_["walletKitDeriveNextKey"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitDeriveNextKey};
  methodMap_["walletKitDeriveKey"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitDeriveKey};
  methodMap_["walletKitNextAddr"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitNextAddr};
  methodMap_["walletKitListAccounts"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListAccounts};
  methodMap_["walletKitRequiredReserve"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitRequiredReserve};
  methodMap_["walletKitListAddresses"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListAddresses};
  methodMap_["walletKitSignMessageWithAddr"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitSignMessageWithAddr};
  methodMap_["walletKitVerifyMessageWithAddr"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitVerifyMessageWithAddr};
  methodMap_["walletKitImportAccount"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitImportAccount};
  methodMap_["walletKitImportPublicKey"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitImportPublicKey};
  methodMap_["walletKitImportTapscript"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitImportTapscript};
  methodMap_["walletKitPublishTransaction"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitPublishTransaction};
  methodMap_["walletKitSendOutputs"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitSendOutputs};
  methodMap_["walletKitEstimateFee"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitEstimateFee};
  methodMap_["walletKitPendingSweeps"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitPendingSweeps};
  methodMap_["walletKitBumpFee"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitBumpFee};
  methodMap_["walletKitListSweeps"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitListSweeps};
  methodMap_["walletKitLabelTransaction"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitLabelTransaction};
  methodMap_["walletKitFundPsbt"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitFundPsbt};
  methodMap_["walletKitSignPsbt"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitSignPsbt};
  methodMap_["walletKitFinalizePsbt"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_walletKitFinalizePsbt};
  methodMap_["watchtowerGetInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerGetInfo};
  methodMap_["watchtowerClientAddTower"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientAddTower};
  methodMap_["watchtowerClientRemoveTower"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientRemoveTower};
  methodMap_["watchtowerClientListTowers"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientListTowers};
  methodMap_["watchtowerClientGetTowerInfo"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientGetTowerInfo};
  methodMap_["watchtowerClientStats"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientStats};
  methodMap_["watchtowerClientPolicy"] = MethodMetadata {1, __hostFunction_NativeTurboLndCxxSpecJSI_watchtowerClientPolicy};
}


} // namespace facebook::react
