/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativeTurboLndWriteableStream

template <typename P0, typename P1>
struct NativeTurboLndWriteableStream {
  P0 send;
  P1 stop;
  bool operator==(const NativeTurboLndWriteableStream &other) const {
    return send == other.send && stop == other.stop;
  }
};

template <typename T>
struct NativeTurboLndWriteableStreamBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.send)>(rt, value.getProperty(rt, "send"), jsInvoker),
      bridging::fromJs<decltype(types.stop)>(rt, value.getProperty(rt, "stop"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::Function sendToJs(jsi::Runtime &rt, decltype(types.send) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::Function stopToJs(jsi::Runtime &rt, decltype(types.stop) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "send", bridging::toJs(rt, value.send, jsInvoker));
    result.setProperty(rt, "stop", bridging::toJs(rt, value.stop, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeTurboLndCxxSpecJSI : public TurboModule {
protected:
  NativeTurboLndCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value start(jsi::Runtime &rt, jsi::String args) = 0;
  virtual jsi::Value walletBalance(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value channelBalance(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value getTransactions(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value estimateFee(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value sendCoins(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listUnspent(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeTransactions(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value sendMany(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value newAddress(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signMessage(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value verifyMessage(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value connectPeer(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value disconnectPeer(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listPeers(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribePeerEvents(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value getInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value getRecoveryInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value pendingChannels(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listChannels(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeChannelEvents(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value closedChannels(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value openChannelSync(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function openChannel(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value batchOpenChannel(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value fundingStateStep(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Object channelAcceptor(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function closeChannel(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value abandonChannel(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Object sendPayment(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value sendPaymentSync(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Object sendToRoute(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value sendToRouteSync(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value addInvoice(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listInvoices(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value lookupInvoice(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeInvoices(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value decodePayReq(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listPayments(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value deletePayment(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value deleteAllPayments(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value describeGraph(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value getNodeMetrics(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value getChanInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value getNodeInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value queryRoutes(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value getNetworkInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value stopDaemon(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeChannelGraph(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value debugLevel(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value feeReport(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value updateChannelPolicy(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value forwardingHistory(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value exportChannelBackup(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value exportAllChannelBackups(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value verifyChanBackup(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value restoreChannelBackups(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeChannelBackups(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value bakeMacaroon(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listMacaroonIDs(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value deleteMacaroonID(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value listPermissions(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value checkMacaroonPermissions(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Object registerRPCMiddleware(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value sendCustomMessage(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeCustomMessages(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value listAliases(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value lookupHtlcResolution(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value genSeed(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value initWallet(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value unlockWallet(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value changePassword(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function subscribeState(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value getState(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value autopilotStatus(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value autopilotModifyStatus(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value autopilotQueryScores(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value autopilotSetScores(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function chainNotifierRegisterConfirmationsNtfn(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function chainNotifierRegisterSpendNtfn(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function chainNotifierRegisterBlockEpochNtfn(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function invoicesSubscribeSingleInvoice(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value invoicesCancelInvoice(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value invoicesAddHoldInvoice(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value invoicesSettleInvoice(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value invoicesLookupInvoiceV2(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitStatus(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitAddPeer(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitDisconnectPeer(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitIsBanned(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitGetBlockHeader(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitGetBlock(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitGetCFilter(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value neutrinoKitGetBlockHash(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value peersUpdateNodeAnnouncement(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function routerSendPaymentV2(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function routerTrackPaymentV2(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function routerTrackPayments(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value routerEstimateRouteFee(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerSendToRoute(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerSendToRouteV2(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerResetMissionControl(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerQueryMissionControl(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerXImportMissionControl(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerGetMissionControlConfig(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerSetMissionControlConfig(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerQueryProbability(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value routerBuildRoute(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Function routerSubscribeHtlcEvents(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function routerSendPayment(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Function routerTrackPayment(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Object routerHtlcInterceptor(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) = 0;
  virtual jsi::Value routerUpdateChanStatus(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerSignOutputRaw(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerComputeInputScript(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerSignMessage(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerVerifyMessage(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerDeriveSharedKey(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerMuSig2CombineKeys(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerMuSig2CreateSession(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerMuSig2RegisterNonces(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerMuSig2Sign(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerMuSig2CombineSig(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value signerMuSig2Cleanup(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value versionerGetVersion(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitListUnspent(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitLeaseOutput(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitReleaseOutput(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitListLeases(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitDeriveNextKey(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitDeriveKey(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitNextAddr(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitListAccounts(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitRequiredReserve(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitListAddresses(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitSignMessageWithAddr(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitVerifyMessageWithAddr(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitImportAccount(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitImportPublicKey(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitImportTapscript(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitPublishTransaction(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitSendOutputs(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitEstimateFee(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitPendingSweeps(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitBumpFee(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitListSweeps(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitLabelTransaction(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitFundPsbt(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitSignPsbt(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value walletKitFinalizePsbt(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerGetInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerClientAddTower(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerClientRemoveTower(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerClientListTowers(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerClientGetTowerInfo(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerClientStats(jsi::Runtime &rt, jsi::String data) = 0;
  virtual jsi::Value watchtowerClientPolicy(jsi::Runtime &rt, jsi::String data) = 0;

};

template <typename T>
class JSI_EXPORT NativeTurboLndCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "TurboLndModuleCxx";

protected:
  NativeTurboLndCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTurboLndCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeTurboLndCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTurboLndCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value start(jsi::Runtime &rt, jsi::String args) override {
      static_assert(
          bridging::getParameterCount(&T::start) == 2,
          "Expected start(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::start, jsInvoker_, instance_, std::move(args));
    }
    jsi::Value walletBalance(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletBalance) == 2,
          "Expected walletBalance(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletBalance, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value channelBalance(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::channelBalance) == 2,
          "Expected channelBalance(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::channelBalance, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value getTransactions(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getTransactions) == 2,
          "Expected getTransactions(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getTransactions, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value estimateFee(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::estimateFee) == 2,
          "Expected estimateFee(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::estimateFee, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value sendCoins(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::sendCoins) == 2,
          "Expected sendCoins(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::sendCoins, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listUnspent(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listUnspent) == 2,
          "Expected listUnspent(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listUnspent, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeTransactions(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeTransactions) == 4,
          "Expected subscribeTransactions(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeTransactions, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value sendMany(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::sendMany) == 2,
          "Expected sendMany(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::sendMany, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value newAddress(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::newAddress) == 2,
          "Expected newAddress(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::newAddress, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signMessage(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signMessage) == 2,
          "Expected signMessage(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signMessage, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value verifyMessage(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::verifyMessage) == 2,
          "Expected verifyMessage(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::verifyMessage, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value connectPeer(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::connectPeer) == 2,
          "Expected connectPeer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::connectPeer, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value disconnectPeer(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::disconnectPeer) == 2,
          "Expected disconnectPeer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::disconnectPeer, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listPeers(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listPeers) == 2,
          "Expected listPeers(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listPeers, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribePeerEvents(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribePeerEvents) == 4,
          "Expected subscribePeerEvents(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribePeerEvents, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value getInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getInfo) == 2,
          "Expected getInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value getRecoveryInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getRecoveryInfo) == 2,
          "Expected getRecoveryInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getRecoveryInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value pendingChannels(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::pendingChannels) == 2,
          "Expected pendingChannels(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pendingChannels, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listChannels(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listChannels) == 2,
          "Expected listChannels(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listChannels, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeChannelEvents(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeChannelEvents) == 4,
          "Expected subscribeChannelEvents(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeChannelEvents, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value closedChannels(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::closedChannels) == 2,
          "Expected closedChannels(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::closedChannels, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value openChannelSync(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::openChannelSync) == 2,
          "Expected openChannelSync(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::openChannelSync, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function openChannel(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::openChannel) == 4,
          "Expected openChannel(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::openChannel, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value batchOpenChannel(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::batchOpenChannel) == 2,
          "Expected batchOpenChannel(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::batchOpenChannel, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value fundingStateStep(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::fundingStateStep) == 2,
          "Expected fundingStateStep(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::fundingStateStep, jsInvoker_, instance_, std::move(data));
    }
    jsi::Object channelAcceptor(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::channelAcceptor) == 3,
          "Expected channelAcceptor(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::channelAcceptor, jsInvoker_, instance_, std::move(onResponse), std::move(onError));
    }
    jsi::Function closeChannel(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::closeChannel) == 4,
          "Expected closeChannel(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::closeChannel, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value abandonChannel(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::abandonChannel) == 2,
          "Expected abandonChannel(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::abandonChannel, jsInvoker_, instance_, std::move(data));
    }
    jsi::Object sendPayment(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::sendPayment) == 3,
          "Expected sendPayment(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::sendPayment, jsInvoker_, instance_, std::move(onResponse), std::move(onError));
    }
    jsi::Value sendPaymentSync(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::sendPaymentSync) == 2,
          "Expected sendPaymentSync(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::sendPaymentSync, jsInvoker_, instance_, std::move(data));
    }
    jsi::Object sendToRoute(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::sendToRoute) == 3,
          "Expected sendToRoute(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::sendToRoute, jsInvoker_, instance_, std::move(onResponse), std::move(onError));
    }
    jsi::Value sendToRouteSync(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::sendToRouteSync) == 2,
          "Expected sendToRouteSync(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::sendToRouteSync, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value addInvoice(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::addInvoice) == 2,
          "Expected addInvoice(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addInvoice, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listInvoices(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listInvoices) == 2,
          "Expected listInvoices(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listInvoices, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value lookupInvoice(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::lookupInvoice) == 2,
          "Expected lookupInvoice(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::lookupInvoice, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeInvoices(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeInvoices) == 4,
          "Expected subscribeInvoices(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeInvoices, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value decodePayReq(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::decodePayReq) == 2,
          "Expected decodePayReq(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::decodePayReq, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listPayments(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listPayments) == 2,
          "Expected listPayments(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listPayments, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value deletePayment(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::deletePayment) == 2,
          "Expected deletePayment(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::deletePayment, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value deleteAllPayments(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::deleteAllPayments) == 2,
          "Expected deleteAllPayments(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::deleteAllPayments, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value describeGraph(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::describeGraph) == 2,
          "Expected describeGraph(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::describeGraph, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value getNodeMetrics(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getNodeMetrics) == 2,
          "Expected getNodeMetrics(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getNodeMetrics, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value getChanInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getChanInfo) == 2,
          "Expected getChanInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getChanInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value getNodeInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getNodeInfo) == 2,
          "Expected getNodeInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getNodeInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value queryRoutes(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::queryRoutes) == 2,
          "Expected queryRoutes(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::queryRoutes, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value getNetworkInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getNetworkInfo) == 2,
          "Expected getNetworkInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getNetworkInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value stopDaemon(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::stopDaemon) == 2,
          "Expected stopDaemon(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stopDaemon, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeChannelGraph(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeChannelGraph) == 4,
          "Expected subscribeChannelGraph(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeChannelGraph, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value debugLevel(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::debugLevel) == 2,
          "Expected debugLevel(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::debugLevel, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value feeReport(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::feeReport) == 2,
          "Expected feeReport(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::feeReport, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value updateChannelPolicy(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::updateChannelPolicy) == 2,
          "Expected updateChannelPolicy(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateChannelPolicy, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value forwardingHistory(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::forwardingHistory) == 2,
          "Expected forwardingHistory(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::forwardingHistory, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value exportChannelBackup(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::exportChannelBackup) == 2,
          "Expected exportChannelBackup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::exportChannelBackup, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value exportAllChannelBackups(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::exportAllChannelBackups) == 2,
          "Expected exportAllChannelBackups(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::exportAllChannelBackups, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value verifyChanBackup(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::verifyChanBackup) == 2,
          "Expected verifyChanBackup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::verifyChanBackup, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value restoreChannelBackups(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::restoreChannelBackups) == 2,
          "Expected restoreChannelBackups(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::restoreChannelBackups, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeChannelBackups(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeChannelBackups) == 4,
          "Expected subscribeChannelBackups(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeChannelBackups, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value bakeMacaroon(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::bakeMacaroon) == 2,
          "Expected bakeMacaroon(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::bakeMacaroon, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listMacaroonIDs(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listMacaroonIDs) == 2,
          "Expected listMacaroonIDs(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listMacaroonIDs, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value deleteMacaroonID(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::deleteMacaroonID) == 2,
          "Expected deleteMacaroonID(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::deleteMacaroonID, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value listPermissions(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listPermissions) == 2,
          "Expected listPermissions(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listPermissions, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value checkMacaroonPermissions(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::checkMacaroonPermissions) == 2,
          "Expected checkMacaroonPermissions(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkMacaroonPermissions, jsInvoker_, instance_, std::move(data));
    }
    jsi::Object registerRPCMiddleware(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::registerRPCMiddleware) == 3,
          "Expected registerRPCMiddleware(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::registerRPCMiddleware, jsInvoker_, instance_, std::move(onResponse), std::move(onError));
    }
    jsi::Value sendCustomMessage(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::sendCustomMessage) == 2,
          "Expected sendCustomMessage(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::sendCustomMessage, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeCustomMessages(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeCustomMessages) == 4,
          "Expected subscribeCustomMessages(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeCustomMessages, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value listAliases(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::listAliases) == 2,
          "Expected listAliases(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::listAliases, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value lookupHtlcResolution(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::lookupHtlcResolution) == 2,
          "Expected lookupHtlcResolution(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::lookupHtlcResolution, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value genSeed(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::genSeed) == 2,
          "Expected genSeed(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::genSeed, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value initWallet(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::initWallet) == 2,
          "Expected initWallet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initWallet, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value unlockWallet(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::unlockWallet) == 2,
          "Expected unlockWallet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::unlockWallet, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value changePassword(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::changePassword) == 2,
          "Expected changePassword(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::changePassword, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function subscribeState(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::subscribeState) == 4,
          "Expected subscribeState(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::subscribeState, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value getState(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::getState) == 2,
          "Expected getState(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getState, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value autopilotStatus(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::autopilotStatus) == 2,
          "Expected autopilotStatus(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::autopilotStatus, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value autopilotModifyStatus(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::autopilotModifyStatus) == 2,
          "Expected autopilotModifyStatus(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::autopilotModifyStatus, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value autopilotQueryScores(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::autopilotQueryScores) == 2,
          "Expected autopilotQueryScores(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::autopilotQueryScores, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value autopilotSetScores(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::autopilotSetScores) == 2,
          "Expected autopilotSetScores(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::autopilotSetScores, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function chainNotifierRegisterConfirmationsNtfn(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::chainNotifierRegisterConfirmationsNtfn) == 4,
          "Expected chainNotifierRegisterConfirmationsNtfn(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::chainNotifierRegisterConfirmationsNtfn, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function chainNotifierRegisterSpendNtfn(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::chainNotifierRegisterSpendNtfn) == 4,
          "Expected chainNotifierRegisterSpendNtfn(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::chainNotifierRegisterSpendNtfn, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function chainNotifierRegisterBlockEpochNtfn(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::chainNotifierRegisterBlockEpochNtfn) == 4,
          "Expected chainNotifierRegisterBlockEpochNtfn(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::chainNotifierRegisterBlockEpochNtfn, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function invoicesSubscribeSingleInvoice(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::invoicesSubscribeSingleInvoice) == 4,
          "Expected invoicesSubscribeSingleInvoice(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::invoicesSubscribeSingleInvoice, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value invoicesCancelInvoice(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::invoicesCancelInvoice) == 2,
          "Expected invoicesCancelInvoice(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::invoicesCancelInvoice, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value invoicesAddHoldInvoice(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::invoicesAddHoldInvoice) == 2,
          "Expected invoicesAddHoldInvoice(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::invoicesAddHoldInvoice, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value invoicesSettleInvoice(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::invoicesSettleInvoice) == 2,
          "Expected invoicesSettleInvoice(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::invoicesSettleInvoice, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value invoicesLookupInvoiceV2(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::invoicesLookupInvoiceV2) == 2,
          "Expected invoicesLookupInvoiceV2(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::invoicesLookupInvoiceV2, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitStatus(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitStatus) == 2,
          "Expected neutrinoKitStatus(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitStatus, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitAddPeer(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitAddPeer) == 2,
          "Expected neutrinoKitAddPeer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitAddPeer, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitDisconnectPeer(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitDisconnectPeer) == 2,
          "Expected neutrinoKitDisconnectPeer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitDisconnectPeer, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitIsBanned(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitIsBanned) == 2,
          "Expected neutrinoKitIsBanned(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitIsBanned, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitGetBlockHeader(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitGetBlockHeader) == 2,
          "Expected neutrinoKitGetBlockHeader(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitGetBlockHeader, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitGetBlock(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitGetBlock) == 2,
          "Expected neutrinoKitGetBlock(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitGetBlock, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitGetCFilter(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitGetCFilter) == 2,
          "Expected neutrinoKitGetCFilter(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitGetCFilter, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value neutrinoKitGetBlockHash(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::neutrinoKitGetBlockHash) == 2,
          "Expected neutrinoKitGetBlockHash(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::neutrinoKitGetBlockHash, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value peersUpdateNodeAnnouncement(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::peersUpdateNodeAnnouncement) == 2,
          "Expected peersUpdateNodeAnnouncement(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::peersUpdateNodeAnnouncement, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function routerSendPaymentV2(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerSendPaymentV2) == 4,
          "Expected routerSendPaymentV2(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::routerSendPaymentV2, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function routerTrackPaymentV2(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerTrackPaymentV2) == 4,
          "Expected routerTrackPaymentV2(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::routerTrackPaymentV2, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function routerTrackPayments(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerTrackPayments) == 4,
          "Expected routerTrackPayments(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::routerTrackPayments, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Value routerEstimateRouteFee(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerEstimateRouteFee) == 2,
          "Expected routerEstimateRouteFee(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerEstimateRouteFee, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerSendToRoute(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerSendToRoute) == 2,
          "Expected routerSendToRoute(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerSendToRoute, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerSendToRouteV2(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerSendToRouteV2) == 2,
          "Expected routerSendToRouteV2(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerSendToRouteV2, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerResetMissionControl(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerResetMissionControl) == 2,
          "Expected routerResetMissionControl(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerResetMissionControl, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerQueryMissionControl(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerQueryMissionControl) == 2,
          "Expected routerQueryMissionControl(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerQueryMissionControl, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerXImportMissionControl(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerXImportMissionControl) == 2,
          "Expected routerXImportMissionControl(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerXImportMissionControl, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerGetMissionControlConfig(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerGetMissionControlConfig) == 2,
          "Expected routerGetMissionControlConfig(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerGetMissionControlConfig, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerSetMissionControlConfig(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerSetMissionControlConfig) == 2,
          "Expected routerSetMissionControlConfig(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerSetMissionControlConfig, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerQueryProbability(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerQueryProbability) == 2,
          "Expected routerQueryProbability(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerQueryProbability, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value routerBuildRoute(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerBuildRoute) == 2,
          "Expected routerBuildRoute(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerBuildRoute, jsInvoker_, instance_, std::move(data));
    }
    jsi::Function routerSubscribeHtlcEvents(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerSubscribeHtlcEvents) == 4,
          "Expected routerSubscribeHtlcEvents(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::routerSubscribeHtlcEvents, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function routerSendPayment(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerSendPayment) == 4,
          "Expected routerSendPayment(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::routerSendPayment, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Function routerTrackPayment(jsi::Runtime &rt, jsi::String data, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerTrackPayment) == 4,
          "Expected routerTrackPayment(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Function>(
          rt, &T::routerTrackPayment, jsInvoker_, instance_, std::move(data), std::move(onResponse), std::move(onError));
    }
    jsi::Object routerHtlcInterceptor(jsi::Runtime &rt, jsi::Function onResponse, jsi::Function onError) override {
      static_assert(
          bridging::getParameterCount(&T::routerHtlcInterceptor) == 3,
          "Expected routerHtlcInterceptor(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::routerHtlcInterceptor, jsInvoker_, instance_, std::move(onResponse), std::move(onError));
    }
    jsi::Value routerUpdateChanStatus(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::routerUpdateChanStatus) == 2,
          "Expected routerUpdateChanStatus(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::routerUpdateChanStatus, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerSignOutputRaw(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerSignOutputRaw) == 2,
          "Expected signerSignOutputRaw(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerSignOutputRaw, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerComputeInputScript(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerComputeInputScript) == 2,
          "Expected signerComputeInputScript(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerComputeInputScript, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerSignMessage(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerSignMessage) == 2,
          "Expected signerSignMessage(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerSignMessage, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerVerifyMessage(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerVerifyMessage) == 2,
          "Expected signerVerifyMessage(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerVerifyMessage, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerDeriveSharedKey(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerDeriveSharedKey) == 2,
          "Expected signerDeriveSharedKey(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerDeriveSharedKey, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerMuSig2CombineKeys(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerMuSig2CombineKeys) == 2,
          "Expected signerMuSig2CombineKeys(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerMuSig2CombineKeys, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerMuSig2CreateSession(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerMuSig2CreateSession) == 2,
          "Expected signerMuSig2CreateSession(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerMuSig2CreateSession, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerMuSig2RegisterNonces(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerMuSig2RegisterNonces) == 2,
          "Expected signerMuSig2RegisterNonces(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerMuSig2RegisterNonces, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerMuSig2Sign(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerMuSig2Sign) == 2,
          "Expected signerMuSig2Sign(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerMuSig2Sign, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerMuSig2CombineSig(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerMuSig2CombineSig) == 2,
          "Expected signerMuSig2CombineSig(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerMuSig2CombineSig, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value signerMuSig2Cleanup(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::signerMuSig2Cleanup) == 2,
          "Expected signerMuSig2Cleanup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::signerMuSig2Cleanup, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value versionerGetVersion(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::versionerGetVersion) == 2,
          "Expected versionerGetVersion(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::versionerGetVersion, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitListUnspent(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitListUnspent) == 2,
          "Expected walletKitListUnspent(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitListUnspent, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitLeaseOutput(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitLeaseOutput) == 2,
          "Expected walletKitLeaseOutput(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitLeaseOutput, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitReleaseOutput(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitReleaseOutput) == 2,
          "Expected walletKitReleaseOutput(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitReleaseOutput, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitListLeases(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitListLeases) == 2,
          "Expected walletKitListLeases(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitListLeases, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitDeriveNextKey(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitDeriveNextKey) == 2,
          "Expected walletKitDeriveNextKey(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitDeriveNextKey, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitDeriveKey(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitDeriveKey) == 2,
          "Expected walletKitDeriveKey(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitDeriveKey, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitNextAddr(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitNextAddr) == 2,
          "Expected walletKitNextAddr(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitNextAddr, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitListAccounts(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitListAccounts) == 2,
          "Expected walletKitListAccounts(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitListAccounts, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitRequiredReserve(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitRequiredReserve) == 2,
          "Expected walletKitRequiredReserve(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitRequiredReserve, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitListAddresses(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitListAddresses) == 2,
          "Expected walletKitListAddresses(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitListAddresses, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitSignMessageWithAddr(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitSignMessageWithAddr) == 2,
          "Expected walletKitSignMessageWithAddr(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitSignMessageWithAddr, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitVerifyMessageWithAddr(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitVerifyMessageWithAddr) == 2,
          "Expected walletKitVerifyMessageWithAddr(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitVerifyMessageWithAddr, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitImportAccount(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitImportAccount) == 2,
          "Expected walletKitImportAccount(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitImportAccount, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitImportPublicKey(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitImportPublicKey) == 2,
          "Expected walletKitImportPublicKey(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitImportPublicKey, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitImportTapscript(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitImportTapscript) == 2,
          "Expected walletKitImportTapscript(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitImportTapscript, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitPublishTransaction(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitPublishTransaction) == 2,
          "Expected walletKitPublishTransaction(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitPublishTransaction, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitSendOutputs(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitSendOutputs) == 2,
          "Expected walletKitSendOutputs(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitSendOutputs, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitEstimateFee(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitEstimateFee) == 2,
          "Expected walletKitEstimateFee(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitEstimateFee, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitPendingSweeps(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitPendingSweeps) == 2,
          "Expected walletKitPendingSweeps(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitPendingSweeps, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitBumpFee(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitBumpFee) == 2,
          "Expected walletKitBumpFee(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitBumpFee, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitListSweeps(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitListSweeps) == 2,
          "Expected walletKitListSweeps(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitListSweeps, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitLabelTransaction(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitLabelTransaction) == 2,
          "Expected walletKitLabelTransaction(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitLabelTransaction, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitFundPsbt(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitFundPsbt) == 2,
          "Expected walletKitFundPsbt(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitFundPsbt, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitSignPsbt(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitSignPsbt) == 2,
          "Expected walletKitSignPsbt(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitSignPsbt, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value walletKitFinalizePsbt(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::walletKitFinalizePsbt) == 2,
          "Expected walletKitFinalizePsbt(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::walletKitFinalizePsbt, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerGetInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerGetInfo) == 2,
          "Expected watchtowerGetInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerGetInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerClientAddTower(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerClientAddTower) == 2,
          "Expected watchtowerClientAddTower(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerClientAddTower, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerClientRemoveTower(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerClientRemoveTower) == 2,
          "Expected watchtowerClientRemoveTower(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerClientRemoveTower, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerClientListTowers(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerClientListTowers) == 2,
          "Expected watchtowerClientListTowers(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerClientListTowers, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerClientGetTowerInfo(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerClientGetTowerInfo) == 2,
          "Expected watchtowerClientGetTowerInfo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerClientGetTowerInfo, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerClientStats(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerClientStats) == 2,
          "Expected watchtowerClientStats(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerClientStats, jsInvoker_, instance_, std::move(data));
    }
    jsi::Value watchtowerClientPolicy(jsi::Runtime &rt, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::watchtowerClientPolicy) == 2,
          "Expected watchtowerClientPolicy(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::watchtowerClientPolicy, jsInvoker_, instance_, std::move(data));
    }

  private:
    friend class NativeTurboLndCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
