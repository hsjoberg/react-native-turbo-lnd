"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetRecoveryInfoResponseSchema = exports.GetRecoveryInfoRequestSchema = exports.GetInfoResponseSchema = exports.GetInfoRequestSchema = exports.GenSeedResponseSchema = exports.GenSeedRequestSchema = exports.FundingTransitionMsgSchema = exports.FundingStateStepRespSchema = exports.FundingShimSchema = exports.FundingShimCancelSchema = exports.FundingPsbtVerifySchema = exports.FundingPsbtFinalizeSchema = exports.ForwardingHistoryResponseSchema = exports.ForwardingHistoryRequestSchema = exports.ForwardingEventSchema = exports.FloatMetricSchema = exports.FeeReportResponseSchema = exports.FeeReportRequestSchema = exports.FeeLimitSchema = exports.FeatureSchema = exports.FeatureBitSchema = exports.FeatureBit = exports.Failure_FailureCodeSchema = exports.Failure_FailureCode = exports.FailureSchema = exports.FailedUpdateSchema = exports.ExportChannelBackupRequestSchema = exports.EstimateFeeResponseSchema = exports.EstimateFeeRequestSchema = exports.EdgeLocatorSchema = exports.DisconnectPeerResponseSchema = exports.DisconnectPeerRequestSchema = exports.DeletePaymentResponseSchema = exports.DeletePaymentRequestSchema = exports.DeleteMacaroonIDResponseSchema = exports.DeleteMacaroonIDRequestSchema = exports.DeleteAllPaymentsResponseSchema = exports.DeleteAllPaymentsRequestSchema = exports.DebugLevelResponseSchema = exports.DebugLevelRequestSchema = exports.CustomMessageSchema = exports.ConnectPeerResponseSchema = exports.ConnectPeerRequestSchema = exports.ConfirmationUpdateSchema = exports.CommitmentTypeSchema = exports.CommitmentType = exports.ClosedChannelsResponseSchema = exports.ClosedChannelsRequestSchema = exports.ClosedChannelUpdateSchema = exports.CloseStatusUpdateSchema = exports.CloseChannelRequestSchema = exports.CheckMacPermResponseSchema = exports.CheckMacPermRequestSchema = exports.ChannelUpdateSchema = exports.ChannelSchema = exports.ChannelPointSchema = exports.ChannelOpenUpdateSchema = exports.ChannelGraphSchema = exports.ChannelGraphRequestSchema = exports.ChannelFeeReportSchema = exports.ChannelEventUpdate_UpdateTypeSchema = exports.ChannelEventUpdate_UpdateType = exports.ChannelEventUpdateSchema = exports.ChannelEventSubscriptionSchema = exports.ChannelEdgeUpdateSchema = exports.ChannelEdgeSchema = exports.ChannelConstraintsSchema = exports.ChannelCloseUpdateSchema = exports.ChannelCloseSummary_ClosureTypeSchema = exports.ChannelCloseSummary_ClosureType = exports.ChannelCloseSummarySchema = exports.ChannelBalanceResponseSchema = exports.ChannelBalanceRequestSchema = exports.ChannelBackupsSchema = exports.ChannelBackupSubscriptionSchema = exports.ChannelBackupSchema = exports.ChannelAcceptResponseSchema = exports.ChannelAcceptRequestSchema = exports.ChangePasswordResponseSchema = exports.ChangePasswordRequestSchema = exports.ChanPointShimSchema = exports.ChanInfoRequestSchema = exports.ChanBackupSnapshotSchema = exports.ChanBackupExportRequestSchema = exports.ChainSchema = exports.BatchOpenChannelSchema = exports.BatchOpenChannelResponseSchema = exports.BatchOpenChannelRequestSchema = exports.BakeMacaroonResponseSchema = exports.BakeMacaroonRequestSchema = exports.AmountSchema = exports.AliasMapSchema = exports.AddressTypeSchema = exports.AddressType = exports.AddInvoiceResponseSchema = exports.AbandonChannelResponseSchema = exports.AbandonChannelRequestSchema = exports.AMPSchema = exports.AMPRecordSchema = exports.AMPInvoiceStateSchema = void 0;
exports.PolicyUpdateRequestSchema = exports.PendingUpdateSchema = exports.PendingHTLCSchema = exports.PendingChannelsResponse_WaitingCloseChannelSchema = exports.PendingChannelsResponse_PendingOpenChannelSchema = exports.PendingChannelsResponse_PendingChannelSchema = exports.PendingChannelsResponse_ForceClosedChannel_AnchorStateSchema = exports.PendingChannelsResponse_ForceClosedChannel_AnchorState = exports.PendingChannelsResponse_ForceClosedChannelSchema = exports.PendingChannelsResponse_CommitmentsSchema = exports.PendingChannelsResponse_ClosedChannelSchema = exports.PendingChannelsResponseSchema = exports.PendingChannelsRequestSchema = exports.Peer_SyncTypeSchema = exports.Peer_SyncType = exports.PeerSchema = exports.PeerEvent_EventTypeSchema = exports.PeerEvent_EventType = exports.PeerEventSubscriptionSchema = exports.PeerEventSchema = exports.Payment_PaymentStatusSchema = exports.Payment_PaymentStatus = exports.PaymentSchema = exports.PaymentHashSchema = exports.PaymentFailureReasonSchema = exports.PaymentFailureReason = exports.PayReqStringSchema = exports.PayReqSchema = exports.OutputScriptTypeSchema = exports.OutputScriptType = exports.OutputDetailSchema = exports.OutPointSchema = exports.OpenStatusUpdateSchema = exports.OpenChannelRequestSchema = exports.OpSchema = exports.NodeUpdateSchema = exports.NodePairSchema = exports.NodeMetricsResponseSchema = exports.NodeMetricsRequestSchema = exports.NodeMetricTypeSchema = exports.NodeMetricType = exports.NodeInfoSchema = exports.NodeInfoRequestSchema = exports.NodeAddressSchema = exports.NewAddressResponseSchema = exports.NewAddressRequestSchema = exports.NetworkInfoSchema = exports.NetworkInfoRequestSchema = exports.MultiChanBackupSchema = exports.MiddlewareRegistrationSchema = exports.MacaroonPermissionSchema = exports.MacaroonPermissionListSchema = exports.MacaroonIdSchema = exports.MPPRecordSchema = exports.LookupHtlcResolutionResponseSchema = exports.LookupHtlcResolutionRequestSchema = exports.ListUnspentResponseSchema = exports.ListUnspentRequestSchema = exports.ListPermissionsResponseSchema = exports.ListPermissionsRequestSchema = exports.ListPeersResponseSchema = exports.ListPeersRequestSchema = exports.ListPaymentsResponseSchema = exports.ListPaymentsRequestSchema = exports.ListMacaroonIDsResponseSchema = exports.ListMacaroonIDsRequestSchema = exports.ListInvoiceResponseSchema = exports.ListInvoiceRequestSchema = exports.ListChannelsResponseSchema = exports.ListChannelsRequestSchema = exports.ListAliasesResponseSchema = exports.ListAliasesRequestSchema = exports.LightningNodeSchema = exports.LightningAddressSchema = exports.Lightning = exports.KeyLocatorSchema = exports.KeyDescriptorSchema = exports.Invoice_InvoiceStateSchema = exports.Invoice_InvoiceState = exports.InvoiceSubscriptionSchema = exports.InvoiceSchema = exports.InvoiceHTLCStateSchema = exports.InvoiceHTLCState = exports.InvoiceHTLCSchema = exports.InterceptFeedbackSchema = exports.InitiatorSchema = exports.Initiator = exports.InitWalletResponseSchema = exports.InitWalletRequestSchema = exports.HopSchema = exports.HopHintSchema = exports.HTLCSchema = exports.HTLCAttempt_HTLCStatusSchema = exports.HTLCAttempt_HTLCStatus = exports.HTLCAttemptSchema = exports.GraphTopologyUpdateSchema = exports.GraphTopologySubscriptionSchema = exports.GetTransactionsRequestSchema = exports.GetStateResponseSchema = exports.GetStateRequestSchema = void 0;
exports.file_walletunlocker = exports.file_stateservice = exports.file_lightning = exports.WatchOnlySchema = exports.WatchOnlyAccountSchema = exports.WalletUnlocker = exports.WalletStateSchema = exports.WalletState = exports.WalletBalanceResponseSchema = exports.WalletBalanceRequestSchema = exports.WalletAccountBalanceSchema = exports.VerifyMessageResponseSchema = exports.VerifyMessageRequestSchema = exports.VerifyChanBackupResponseSchema = exports.UtxoSchema = exports.UpdateFailureSchema = exports.UpdateFailure = exports.UnlockWalletResponseSchema = exports.UnlockWalletRequestSchema = exports.TransactionSchema = exports.TransactionDetailsSchema = exports.TimestampedErrorSchema = exports.SubscribeStateResponseSchema = exports.SubscribeStateRequestSchema = exports.SubscribeCustomMessagesRequestSchema = exports.StreamAuthSchema = exports.StopResponseSchema = exports.StopRequestSchema = exports.State = exports.SignMessageResponseSchema = exports.SignMessageRequestSchema = exports.SetIDSchema = exports.SendToRouteRequestSchema = exports.SendResponseSchema = exports.SendRequestSchema = exports.SendManyResponseSchema = exports.SendManyRequestSchema = exports.SendCustomMessageResponseSchema = exports.SendCustomMessageRequestSchema = exports.SendCoinsResponseSchema = exports.SendCoinsRequestSchema = exports.RoutingPolicySchema = exports.RouteSchema = exports.RouteHintSchema = exports.RestoreChanBackupRequestSchema = exports.RestoreBackupResponseSchema = exports.ResolutionTypeSchema = exports.ResolutionType = exports.ResolutionSchema = exports.ResolutionOutcomeSchema = exports.ResolutionOutcome = exports.ReadyForPsbtFundingSchema = exports.RPCMiddlewareResponseSchema = exports.RPCMiddlewareRequestSchema = exports.RPCMessageSchema = exports.QueryRoutesResponseSchema = exports.QueryRoutesRequestSchema = exports.PsbtShimSchema = exports.PreviousOutPointSchema = exports.PolicyUpdateResponseSchema = void 0;
var _codegenv = require("@bufbuild/protobuf/codegenv1");
// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file lightning.proto (package lnrpc, syntax proto3)
/* eslint-disable */

/**
 * Describes the file lightning.proto.
 */
const file_lightning = exports.file_lightning = /*@__PURE__*/
(0, _codegenv.fileDesc)("");

/**
 * @generated from message lnrpc.LookupHtlcResolutionRequest
 */

/**
 * Describes the message lnrpc.LookupHtlcResolutionRequest.
 * Use `create(LookupHtlcResolutionRequestSchema)` to create a new message.
 */
const LookupHtlcResolutionRequestSchema = exports.LookupHtlcResolutionRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 0);

/**
 * @generated from message lnrpc.LookupHtlcResolutionResponse
 */

/**
 * Describes the message lnrpc.LookupHtlcResolutionResponse.
 * Use `create(LookupHtlcResolutionResponseSchema)` to create a new message.
 */
const LookupHtlcResolutionResponseSchema = exports.LookupHtlcResolutionResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 1);

/**
 * @generated from message lnrpc.SubscribeCustomMessagesRequest
 */

/**
 * Describes the message lnrpc.SubscribeCustomMessagesRequest.
 * Use `create(SubscribeCustomMessagesRequestSchema)` to create a new message.
 */
const SubscribeCustomMessagesRequestSchema = exports.SubscribeCustomMessagesRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 2);

/**
 * @generated from message lnrpc.CustomMessage
 */

/**
 * Describes the message lnrpc.CustomMessage.
 * Use `create(CustomMessageSchema)` to create a new message.
 */
const CustomMessageSchema = exports.CustomMessageSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 3);

/**
 * @generated from message lnrpc.SendCustomMessageRequest
 */

/**
 * Describes the message lnrpc.SendCustomMessageRequest.
 * Use `create(SendCustomMessageRequestSchema)` to create a new message.
 */
const SendCustomMessageRequestSchema = exports.SendCustomMessageRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 4);

/**
 * @generated from message lnrpc.SendCustomMessageResponse
 */

/**
 * Describes the message lnrpc.SendCustomMessageResponse.
 * Use `create(SendCustomMessageResponseSchema)` to create a new message.
 */
const SendCustomMessageResponseSchema = exports.SendCustomMessageResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 5);

/**
 * @generated from message lnrpc.Utxo
 */

/**
 * Describes the message lnrpc.Utxo.
 * Use `create(UtxoSchema)` to create a new message.
 */
const UtxoSchema = exports.UtxoSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 6);

/**
 * @generated from message lnrpc.OutputDetail
 */

/**
 * Describes the message lnrpc.OutputDetail.
 * Use `create(OutputDetailSchema)` to create a new message.
 */
const OutputDetailSchema = exports.OutputDetailSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 7);

/**
 * @generated from message lnrpc.Transaction
 */

/**
 * Describes the message lnrpc.Transaction.
 * Use `create(TransactionSchema)` to create a new message.
 */
const TransactionSchema = exports.TransactionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 8);

/**
 * @generated from message lnrpc.GetTransactionsRequest
 */

/**
 * Describes the message lnrpc.GetTransactionsRequest.
 * Use `create(GetTransactionsRequestSchema)` to create a new message.
 */
const GetTransactionsRequestSchema = exports.GetTransactionsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 9);

/**
 * @generated from message lnrpc.TransactionDetails
 */

/**
 * Describes the message lnrpc.TransactionDetails.
 * Use `create(TransactionDetailsSchema)` to create a new message.
 */
const TransactionDetailsSchema = exports.TransactionDetailsSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 10);

/**
 * @generated from message lnrpc.FeeLimit
 */

/**
 * Describes the message lnrpc.FeeLimit.
 * Use `create(FeeLimitSchema)` to create a new message.
 */
const FeeLimitSchema = exports.FeeLimitSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 11);

/**
 * @generated from message lnrpc.SendRequest
 */

/**
 * Describes the message lnrpc.SendRequest.
 * Use `create(SendRequestSchema)` to create a new message.
 */
const SendRequestSchema = exports.SendRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 12);

/**
 * @generated from message lnrpc.SendResponse
 */

/**
 * Describes the message lnrpc.SendResponse.
 * Use `create(SendResponseSchema)` to create a new message.
 */
const SendResponseSchema = exports.SendResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 13);

/**
 * @generated from message lnrpc.SendToRouteRequest
 */

/**
 * Describes the message lnrpc.SendToRouteRequest.
 * Use `create(SendToRouteRequestSchema)` to create a new message.
 */
const SendToRouteRequestSchema = exports.SendToRouteRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 14);

/**
 * @generated from message lnrpc.ChannelAcceptRequest
 */

/**
 * Describes the message lnrpc.ChannelAcceptRequest.
 * Use `create(ChannelAcceptRequestSchema)` to create a new message.
 */
const ChannelAcceptRequestSchema = exports.ChannelAcceptRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 15);

/**
 * @generated from message lnrpc.ChannelAcceptResponse
 */

/**
 * Describes the message lnrpc.ChannelAcceptResponse.
 * Use `create(ChannelAcceptResponseSchema)` to create a new message.
 */
const ChannelAcceptResponseSchema = exports.ChannelAcceptResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 16);

/**
 * @generated from message lnrpc.ChannelPoint
 */

/**
 * Describes the message lnrpc.ChannelPoint.
 * Use `create(ChannelPointSchema)` to create a new message.
 */
const ChannelPointSchema = exports.ChannelPointSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 17);

/**
 * @generated from message lnrpc.OutPoint
 */

/**
 * Describes the message lnrpc.OutPoint.
 * Use `create(OutPointSchema)` to create a new message.
 */
const OutPointSchema = exports.OutPointSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 18);

/**
 * @generated from message lnrpc.PreviousOutPoint
 */

/**
 * Describes the message lnrpc.PreviousOutPoint.
 * Use `create(PreviousOutPointSchema)` to create a new message.
 */
const PreviousOutPointSchema = exports.PreviousOutPointSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 19);

/**
 * @generated from message lnrpc.LightningAddress
 */

/**
 * Describes the message lnrpc.LightningAddress.
 * Use `create(LightningAddressSchema)` to create a new message.
 */
const LightningAddressSchema = exports.LightningAddressSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 20);

/**
 * @generated from message lnrpc.EstimateFeeRequest
 */

/**
 * Describes the message lnrpc.EstimateFeeRequest.
 * Use `create(EstimateFeeRequestSchema)` to create a new message.
 */
const EstimateFeeRequestSchema = exports.EstimateFeeRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 21);

/**
 * @generated from message lnrpc.EstimateFeeResponse
 */

/**
 * Describes the message lnrpc.EstimateFeeResponse.
 * Use `create(EstimateFeeResponseSchema)` to create a new message.
 */
const EstimateFeeResponseSchema = exports.EstimateFeeResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 22);

/**
 * @generated from message lnrpc.SendManyRequest
 */

/**
 * Describes the message lnrpc.SendManyRequest.
 * Use `create(SendManyRequestSchema)` to create a new message.
 */
const SendManyRequestSchema = exports.SendManyRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 23);

/**
 * @generated from message lnrpc.SendManyResponse
 */

/**
 * Describes the message lnrpc.SendManyResponse.
 * Use `create(SendManyResponseSchema)` to create a new message.
 */
const SendManyResponseSchema = exports.SendManyResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 24);

/**
 * @generated from message lnrpc.SendCoinsRequest
 */

/**
 * Describes the message lnrpc.SendCoinsRequest.
 * Use `create(SendCoinsRequestSchema)` to create a new message.
 */
const SendCoinsRequestSchema = exports.SendCoinsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 25);

/**
 * @generated from message lnrpc.SendCoinsResponse
 */

/**
 * Describes the message lnrpc.SendCoinsResponse.
 * Use `create(SendCoinsResponseSchema)` to create a new message.
 */
const SendCoinsResponseSchema = exports.SendCoinsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 26);

/**
 * @generated from message lnrpc.ListUnspentRequest
 */

/**
 * Describes the message lnrpc.ListUnspentRequest.
 * Use `create(ListUnspentRequestSchema)` to create a new message.
 */
const ListUnspentRequestSchema = exports.ListUnspentRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 27);

/**
 * @generated from message lnrpc.ListUnspentResponse
 */

/**
 * Describes the message lnrpc.ListUnspentResponse.
 * Use `create(ListUnspentResponseSchema)` to create a new message.
 */
const ListUnspentResponseSchema = exports.ListUnspentResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 28);

/**
 * @generated from message lnrpc.NewAddressRequest
 */

/**
 * Describes the message lnrpc.NewAddressRequest.
 * Use `create(NewAddressRequestSchema)` to create a new message.
 */
const NewAddressRequestSchema = exports.NewAddressRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 29);

/**
 * @generated from message lnrpc.NewAddressResponse
 */

/**
 * Describes the message lnrpc.NewAddressResponse.
 * Use `create(NewAddressResponseSchema)` to create a new message.
 */
const NewAddressResponseSchema = exports.NewAddressResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 30);

/**
 * @generated from message lnrpc.SignMessageRequest
 */

/**
 * Describes the message lnrpc.SignMessageRequest.
 * Use `create(SignMessageRequestSchema)` to create a new message.
 */
const SignMessageRequestSchema = exports.SignMessageRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 31);

/**
 * @generated from message lnrpc.SignMessageResponse
 */

/**
 * Describes the message lnrpc.SignMessageResponse.
 * Use `create(SignMessageResponseSchema)` to create a new message.
 */
const SignMessageResponseSchema = exports.SignMessageResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 32);

/**
 * @generated from message lnrpc.VerifyMessageRequest
 */

/**
 * Describes the message lnrpc.VerifyMessageRequest.
 * Use `create(VerifyMessageRequestSchema)` to create a new message.
 */
const VerifyMessageRequestSchema = exports.VerifyMessageRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 33);

/**
 * @generated from message lnrpc.VerifyMessageResponse
 */

/**
 * Describes the message lnrpc.VerifyMessageResponse.
 * Use `create(VerifyMessageResponseSchema)` to create a new message.
 */
const VerifyMessageResponseSchema = exports.VerifyMessageResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 34);

/**
 * @generated from message lnrpc.ConnectPeerRequest
 */

/**
 * Describes the message lnrpc.ConnectPeerRequest.
 * Use `create(ConnectPeerRequestSchema)` to create a new message.
 */
const ConnectPeerRequestSchema = exports.ConnectPeerRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 35);

/**
 * @generated from message lnrpc.ConnectPeerResponse
 */

/**
 * Describes the message lnrpc.ConnectPeerResponse.
 * Use `create(ConnectPeerResponseSchema)` to create a new message.
 */
const ConnectPeerResponseSchema = exports.ConnectPeerResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 36);

/**
 * @generated from message lnrpc.DisconnectPeerRequest
 */

/**
 * Describes the message lnrpc.DisconnectPeerRequest.
 * Use `create(DisconnectPeerRequestSchema)` to create a new message.
 */
const DisconnectPeerRequestSchema = exports.DisconnectPeerRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 37);

/**
 * @generated from message lnrpc.DisconnectPeerResponse
 */

/**
 * Describes the message lnrpc.DisconnectPeerResponse.
 * Use `create(DisconnectPeerResponseSchema)` to create a new message.
 */
const DisconnectPeerResponseSchema = exports.DisconnectPeerResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 38);

/**
 * @generated from message lnrpc.HTLC
 */

/**
 * Describes the message lnrpc.HTLC.
 * Use `create(HTLCSchema)` to create a new message.
 */
const HTLCSchema = exports.HTLCSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 39);

/**
 * @generated from message lnrpc.ChannelConstraints
 */

/**
 * Describes the message lnrpc.ChannelConstraints.
 * Use `create(ChannelConstraintsSchema)` to create a new message.
 */
const ChannelConstraintsSchema = exports.ChannelConstraintsSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 40);

/**
 * @generated from message lnrpc.Channel
 */

/**
 * Describes the message lnrpc.Channel.
 * Use `create(ChannelSchema)` to create a new message.
 */
const ChannelSchema = exports.ChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 41);

/**
 * @generated from message lnrpc.ListChannelsRequest
 */

/**
 * Describes the message lnrpc.ListChannelsRequest.
 * Use `create(ListChannelsRequestSchema)` to create a new message.
 */
const ListChannelsRequestSchema = exports.ListChannelsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 42);

/**
 * @generated from message lnrpc.ListChannelsResponse
 */

/**
 * Describes the message lnrpc.ListChannelsResponse.
 * Use `create(ListChannelsResponseSchema)` to create a new message.
 */
const ListChannelsResponseSchema = exports.ListChannelsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 43);

/**
 * @generated from message lnrpc.AliasMap
 */

/**
 * Describes the message lnrpc.AliasMap.
 * Use `create(AliasMapSchema)` to create a new message.
 */
const AliasMapSchema = exports.AliasMapSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 44);

/**
 * @generated from message lnrpc.ListAliasesRequest
 */

/**
 * Describes the message lnrpc.ListAliasesRequest.
 * Use `create(ListAliasesRequestSchema)` to create a new message.
 */
const ListAliasesRequestSchema = exports.ListAliasesRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 45);

/**
 * @generated from message lnrpc.ListAliasesResponse
 */

/**
 * Describes the message lnrpc.ListAliasesResponse.
 * Use `create(ListAliasesResponseSchema)` to create a new message.
 */
const ListAliasesResponseSchema = exports.ListAliasesResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 46);

/**
 * @generated from message lnrpc.ChannelCloseSummary
 */

/**
 * Describes the message lnrpc.ChannelCloseSummary.
 * Use `create(ChannelCloseSummarySchema)` to create a new message.
 */
const ChannelCloseSummarySchema = exports.ChannelCloseSummarySchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 47);

/**
 * @generated from enum lnrpc.ChannelCloseSummary.ClosureType
 */
let ChannelCloseSummary_ClosureType = exports.ChannelCloseSummary_ClosureType = /*#__PURE__*/function (ChannelCloseSummary_ClosureType) {
  ChannelCloseSummary_ClosureType[ChannelCloseSummary_ClosureType["COOPERATIVE_CLOSE"] = 0] = "COOPERATIVE_CLOSE";
  ChannelCloseSummary_ClosureType[ChannelCloseSummary_ClosureType["LOCAL_FORCE_CLOSE"] = 1] = "LOCAL_FORCE_CLOSE";
  ChannelCloseSummary_ClosureType[ChannelCloseSummary_ClosureType["REMOTE_FORCE_CLOSE"] = 2] = "REMOTE_FORCE_CLOSE";
  ChannelCloseSummary_ClosureType[ChannelCloseSummary_ClosureType["BREACH_CLOSE"] = 3] = "BREACH_CLOSE";
  ChannelCloseSummary_ClosureType[ChannelCloseSummary_ClosureType["FUNDING_CANCELED"] = 4] = "FUNDING_CANCELED";
  ChannelCloseSummary_ClosureType[ChannelCloseSummary_ClosureType["ABANDONED"] = 5] = "ABANDONED";
  return ChannelCloseSummary_ClosureType;
}({});
/**
 * Describes the enum lnrpc.ChannelCloseSummary.ClosureType.
 */
const ChannelCloseSummary_ClosureTypeSchema = exports.ChannelCloseSummary_ClosureTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 47, 0);

/**
 * @generated from message lnrpc.Resolution
 */

/**
 * Describes the message lnrpc.Resolution.
 * Use `create(ResolutionSchema)` to create a new message.
 */
const ResolutionSchema = exports.ResolutionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 48);

/**
 * @generated from message lnrpc.ClosedChannelsRequest
 */

/**
 * Describes the message lnrpc.ClosedChannelsRequest.
 * Use `create(ClosedChannelsRequestSchema)` to create a new message.
 */
const ClosedChannelsRequestSchema = exports.ClosedChannelsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 49);

/**
 * @generated from message lnrpc.ClosedChannelsResponse
 */

/**
 * Describes the message lnrpc.ClosedChannelsResponse.
 * Use `create(ClosedChannelsResponseSchema)` to create a new message.
 */
const ClosedChannelsResponseSchema = exports.ClosedChannelsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 50);

/**
 * @generated from message lnrpc.Peer
 */

/**
 * Describes the message lnrpc.Peer.
 * Use `create(PeerSchema)` to create a new message.
 */
const PeerSchema = exports.PeerSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 51);

/**
 * @generated from enum lnrpc.Peer.SyncType
 */
let Peer_SyncType = exports.Peer_SyncType = /*#__PURE__*/function (Peer_SyncType) {
  Peer_SyncType[Peer_SyncType["UNKNOWN_SYNC"] = 0] = "UNKNOWN_SYNC";
  Peer_SyncType[Peer_SyncType["ACTIVE_SYNC"] = 1] = "ACTIVE_SYNC";
  Peer_SyncType[Peer_SyncType["PASSIVE_SYNC"] = 2] = "PASSIVE_SYNC";
  Peer_SyncType[Peer_SyncType["PINNED_SYNC"] = 3] = "PINNED_SYNC";
  return Peer_SyncType;
}({});
/**
 * Describes the enum lnrpc.Peer.SyncType.
 */
const Peer_SyncTypeSchema = exports.Peer_SyncTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 51, 0);

/**
 * @generated from message lnrpc.TimestampedError
 */

/**
 * Describes the message lnrpc.TimestampedError.
 * Use `create(TimestampedErrorSchema)` to create a new message.
 */
const TimestampedErrorSchema = exports.TimestampedErrorSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 52);

/**
 * @generated from message lnrpc.ListPeersRequest
 */

/**
 * Describes the message lnrpc.ListPeersRequest.
 * Use `create(ListPeersRequestSchema)` to create a new message.
 */
const ListPeersRequestSchema = exports.ListPeersRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 53);

/**
 * @generated from message lnrpc.ListPeersResponse
 */

/**
 * Describes the message lnrpc.ListPeersResponse.
 * Use `create(ListPeersResponseSchema)` to create a new message.
 */
const ListPeersResponseSchema = exports.ListPeersResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 54);

/**
 * @generated from message lnrpc.PeerEventSubscription
 */

/**
 * Describes the message lnrpc.PeerEventSubscription.
 * Use `create(PeerEventSubscriptionSchema)` to create a new message.
 */
const PeerEventSubscriptionSchema = exports.PeerEventSubscriptionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 55);

/**
 * @generated from message lnrpc.PeerEvent
 */

/**
 * Describes the message lnrpc.PeerEvent.
 * Use `create(PeerEventSchema)` to create a new message.
 */
const PeerEventSchema = exports.PeerEventSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 56);

/**
 * @generated from enum lnrpc.PeerEvent.EventType
 */
let PeerEvent_EventType = exports.PeerEvent_EventType = /*#__PURE__*/function (PeerEvent_EventType) {
  PeerEvent_EventType[PeerEvent_EventType["PEER_ONLINE"] = 0] = "PEER_ONLINE";
  PeerEvent_EventType[PeerEvent_EventType["PEER_OFFLINE"] = 1] = "PEER_OFFLINE";
  return PeerEvent_EventType;
}({});
/**
 * Describes the enum lnrpc.PeerEvent.EventType.
 */
const PeerEvent_EventTypeSchema = exports.PeerEvent_EventTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 56, 0);

/**
 * @generated from message lnrpc.GetInfoRequest
 */

/**
 * Describes the message lnrpc.GetInfoRequest.
 * Use `create(GetInfoRequestSchema)` to create a new message.
 */
const GetInfoRequestSchema = exports.GetInfoRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 57);

/**
 * @generated from message lnrpc.GetInfoResponse
 */

/**
 * Describes the message lnrpc.GetInfoResponse.
 * Use `create(GetInfoResponseSchema)` to create a new message.
 */
const GetInfoResponseSchema = exports.GetInfoResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 58);

/**
 * @generated from message lnrpc.GetRecoveryInfoRequest
 */

/**
 * Describes the message lnrpc.GetRecoveryInfoRequest.
 * Use `create(GetRecoveryInfoRequestSchema)` to create a new message.
 */
const GetRecoveryInfoRequestSchema = exports.GetRecoveryInfoRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 59);

/**
 * @generated from message lnrpc.GetRecoveryInfoResponse
 */

/**
 * Describes the message lnrpc.GetRecoveryInfoResponse.
 * Use `create(GetRecoveryInfoResponseSchema)` to create a new message.
 */
const GetRecoveryInfoResponseSchema = exports.GetRecoveryInfoResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 60);

/**
 * @generated from message lnrpc.Chain
 */

/**
 * Describes the message lnrpc.Chain.
 * Use `create(ChainSchema)` to create a new message.
 */
const ChainSchema = exports.ChainSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 61);

/**
 * @generated from message lnrpc.ConfirmationUpdate
 */

/**
 * Describes the message lnrpc.ConfirmationUpdate.
 * Use `create(ConfirmationUpdateSchema)` to create a new message.
 */
const ConfirmationUpdateSchema = exports.ConfirmationUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 62);

/**
 * @generated from message lnrpc.ChannelOpenUpdate
 */

/**
 * Describes the message lnrpc.ChannelOpenUpdate.
 * Use `create(ChannelOpenUpdateSchema)` to create a new message.
 */
const ChannelOpenUpdateSchema = exports.ChannelOpenUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 63);

/**
 * @generated from message lnrpc.ChannelCloseUpdate
 */

/**
 * Describes the message lnrpc.ChannelCloseUpdate.
 * Use `create(ChannelCloseUpdateSchema)` to create a new message.
 */
const ChannelCloseUpdateSchema = exports.ChannelCloseUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 64);

/**
 * @generated from message lnrpc.CloseChannelRequest
 */

/**
 * Describes the message lnrpc.CloseChannelRequest.
 * Use `create(CloseChannelRequestSchema)` to create a new message.
 */
const CloseChannelRequestSchema = exports.CloseChannelRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 65);

/**
 * @generated from message lnrpc.CloseStatusUpdate
 */

/**
 * Describes the message lnrpc.CloseStatusUpdate.
 * Use `create(CloseStatusUpdateSchema)` to create a new message.
 */
const CloseStatusUpdateSchema = exports.CloseStatusUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 66);

/**
 * @generated from message lnrpc.PendingUpdate
 */

/**
 * Describes the message lnrpc.PendingUpdate.
 * Use `create(PendingUpdateSchema)` to create a new message.
 */
const PendingUpdateSchema = exports.PendingUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 67);

/**
 * @generated from message lnrpc.ReadyForPsbtFunding
 */

/**
 * Describes the message lnrpc.ReadyForPsbtFunding.
 * Use `create(ReadyForPsbtFundingSchema)` to create a new message.
 */
const ReadyForPsbtFundingSchema = exports.ReadyForPsbtFundingSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 68);

/**
 * @generated from message lnrpc.BatchOpenChannelRequest
 */

/**
 * Describes the message lnrpc.BatchOpenChannelRequest.
 * Use `create(BatchOpenChannelRequestSchema)` to create a new message.
 */
const BatchOpenChannelRequestSchema = exports.BatchOpenChannelRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 69);

/**
 * @generated from message lnrpc.BatchOpenChannel
 */

/**
 * Describes the message lnrpc.BatchOpenChannel.
 * Use `create(BatchOpenChannelSchema)` to create a new message.
 */
const BatchOpenChannelSchema = exports.BatchOpenChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 70);

/**
 * @generated from message lnrpc.BatchOpenChannelResponse
 */

/**
 * Describes the message lnrpc.BatchOpenChannelResponse.
 * Use `create(BatchOpenChannelResponseSchema)` to create a new message.
 */
const BatchOpenChannelResponseSchema = exports.BatchOpenChannelResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 71);

/**
 * @generated from message lnrpc.OpenChannelRequest
 */

/**
 * Describes the message lnrpc.OpenChannelRequest.
 * Use `create(OpenChannelRequestSchema)` to create a new message.
 */
const OpenChannelRequestSchema = exports.OpenChannelRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 72);

/**
 * @generated from message lnrpc.OpenStatusUpdate
 */

/**
 * Describes the message lnrpc.OpenStatusUpdate.
 * Use `create(OpenStatusUpdateSchema)` to create a new message.
 */
const OpenStatusUpdateSchema = exports.OpenStatusUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 73);

/**
 * @generated from message lnrpc.KeyLocator
 */

/**
 * Describes the message lnrpc.KeyLocator.
 * Use `create(KeyLocatorSchema)` to create a new message.
 */
const KeyLocatorSchema = exports.KeyLocatorSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 74);

/**
 * @generated from message lnrpc.KeyDescriptor
 */

/**
 * Describes the message lnrpc.KeyDescriptor.
 * Use `create(KeyDescriptorSchema)` to create a new message.
 */
const KeyDescriptorSchema = exports.KeyDescriptorSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 75);

/**
 * @generated from message lnrpc.ChanPointShim
 */

/**
 * Describes the message lnrpc.ChanPointShim.
 * Use `create(ChanPointShimSchema)` to create a new message.
 */
const ChanPointShimSchema = exports.ChanPointShimSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 76);

/**
 * @generated from message lnrpc.PsbtShim
 */

/**
 * Describes the message lnrpc.PsbtShim.
 * Use `create(PsbtShimSchema)` to create a new message.
 */
const PsbtShimSchema = exports.PsbtShimSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 77);

/**
 * @generated from message lnrpc.FundingShim
 */

/**
 * Describes the message lnrpc.FundingShim.
 * Use `create(FundingShimSchema)` to create a new message.
 */
const FundingShimSchema = exports.FundingShimSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 78);

/**
 * @generated from message lnrpc.FundingShimCancel
 */

/**
 * Describes the message lnrpc.FundingShimCancel.
 * Use `create(FundingShimCancelSchema)` to create a new message.
 */
const FundingShimCancelSchema = exports.FundingShimCancelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 79);

/**
 * @generated from message lnrpc.FundingPsbtVerify
 */

/**
 * Describes the message lnrpc.FundingPsbtVerify.
 * Use `create(FundingPsbtVerifySchema)` to create a new message.
 */
const FundingPsbtVerifySchema = exports.FundingPsbtVerifySchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 80);

/**
 * @generated from message lnrpc.FundingPsbtFinalize
 */

/**
 * Describes the message lnrpc.FundingPsbtFinalize.
 * Use `create(FundingPsbtFinalizeSchema)` to create a new message.
 */
const FundingPsbtFinalizeSchema = exports.FundingPsbtFinalizeSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 81);

/**
 * @generated from message lnrpc.FundingTransitionMsg
 */

/**
 * Describes the message lnrpc.FundingTransitionMsg.
 * Use `create(FundingTransitionMsgSchema)` to create a new message.
 */
const FundingTransitionMsgSchema = exports.FundingTransitionMsgSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 82);

/**
 * @generated from message lnrpc.FundingStateStepResp
 */

/**
 * Describes the message lnrpc.FundingStateStepResp.
 * Use `create(FundingStateStepRespSchema)` to create a new message.
 */
const FundingStateStepRespSchema = exports.FundingStateStepRespSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 83);

/**
 * @generated from message lnrpc.PendingHTLC
 */

/**
 * Describes the message lnrpc.PendingHTLC.
 * Use `create(PendingHTLCSchema)` to create a new message.
 */
const PendingHTLCSchema = exports.PendingHTLCSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 84);

/**
 * @generated from message lnrpc.PendingChannelsRequest
 */

/**
 * Describes the message lnrpc.PendingChannelsRequest.
 * Use `create(PendingChannelsRequestSchema)` to create a new message.
 */
const PendingChannelsRequestSchema = exports.PendingChannelsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 85);

/**
 * @generated from message lnrpc.PendingChannelsResponse
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.
 * Use `create(PendingChannelsResponseSchema)` to create a new message.
 */
const PendingChannelsResponseSchema = exports.PendingChannelsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86);

/**
 * @generated from message lnrpc.PendingChannelsResponse.PendingChannel
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.PendingChannel.
 * Use `create(PendingChannelsResponse_PendingChannelSchema)` to create a new message.
 */
const PendingChannelsResponse_PendingChannelSchema = exports.PendingChannelsResponse_PendingChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86, 0);

/**
 * @generated from message lnrpc.PendingChannelsResponse.PendingOpenChannel
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.PendingOpenChannel.
 * Use `create(PendingChannelsResponse_PendingOpenChannelSchema)` to create a new message.
 */
const PendingChannelsResponse_PendingOpenChannelSchema = exports.PendingChannelsResponse_PendingOpenChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86, 1);

/**
 * @generated from message lnrpc.PendingChannelsResponse.WaitingCloseChannel
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.WaitingCloseChannel.
 * Use `create(PendingChannelsResponse_WaitingCloseChannelSchema)` to create a new message.
 */
const PendingChannelsResponse_WaitingCloseChannelSchema = exports.PendingChannelsResponse_WaitingCloseChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86, 2);

/**
 * @generated from message lnrpc.PendingChannelsResponse.Commitments
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.Commitments.
 * Use `create(PendingChannelsResponse_CommitmentsSchema)` to create a new message.
 */
const PendingChannelsResponse_CommitmentsSchema = exports.PendingChannelsResponse_CommitmentsSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86, 3);

/**
 * @generated from message lnrpc.PendingChannelsResponse.ClosedChannel
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.ClosedChannel.
 * Use `create(PendingChannelsResponse_ClosedChannelSchema)` to create a new message.
 */
const PendingChannelsResponse_ClosedChannelSchema = exports.PendingChannelsResponse_ClosedChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86, 4);

/**
 * @generated from message lnrpc.PendingChannelsResponse.ForceClosedChannel
 */

/**
 * Describes the message lnrpc.PendingChannelsResponse.ForceClosedChannel.
 * Use `create(PendingChannelsResponse_ForceClosedChannelSchema)` to create a new message.
 */
const PendingChannelsResponse_ForceClosedChannelSchema = exports.PendingChannelsResponse_ForceClosedChannelSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 86, 5);

/**
 * 
 * There are three resolution states for the anchor:
 * limbo, lost and recovered. Derive the current state
 * from the limbo and recovered balances.
 *
 * @generated from enum lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState
 */
let PendingChannelsResponse_ForceClosedChannel_AnchorState = exports.PendingChannelsResponse_ForceClosedChannel_AnchorState = /*#__PURE__*/function (PendingChannelsResponse_ForceClosedChannel_AnchorState) {
  PendingChannelsResponse_ForceClosedChannel_AnchorState[PendingChannelsResponse_ForceClosedChannel_AnchorState["LIMBO"] = 0] = "LIMBO";
  PendingChannelsResponse_ForceClosedChannel_AnchorState[PendingChannelsResponse_ForceClosedChannel_AnchorState["RECOVERED"] = 1] = "RECOVERED";
  PendingChannelsResponse_ForceClosedChannel_AnchorState[PendingChannelsResponse_ForceClosedChannel_AnchorState["LOST"] = 2] = "LOST";
  return PendingChannelsResponse_ForceClosedChannel_AnchorState;
}({});
/**
 * Describes the enum lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState.
 */
const PendingChannelsResponse_ForceClosedChannel_AnchorStateSchema = exports.PendingChannelsResponse_ForceClosedChannel_AnchorStateSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 86, 5, 0);

/**
 * @generated from message lnrpc.ChannelEventSubscription
 */

/**
 * Describes the message lnrpc.ChannelEventSubscription.
 * Use `create(ChannelEventSubscriptionSchema)` to create a new message.
 */
const ChannelEventSubscriptionSchema = exports.ChannelEventSubscriptionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 87);

/**
 * @generated from message lnrpc.ChannelEventUpdate
 */

/**
 * Describes the message lnrpc.ChannelEventUpdate.
 * Use `create(ChannelEventUpdateSchema)` to create a new message.
 */
const ChannelEventUpdateSchema = exports.ChannelEventUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 88);

/**
 * @generated from enum lnrpc.ChannelEventUpdate.UpdateType
 */
let ChannelEventUpdate_UpdateType = exports.ChannelEventUpdate_UpdateType = /*#__PURE__*/function (ChannelEventUpdate_UpdateType) {
  ChannelEventUpdate_UpdateType[ChannelEventUpdate_UpdateType["OPEN_CHANNEL"] = 0] = "OPEN_CHANNEL";
  ChannelEventUpdate_UpdateType[ChannelEventUpdate_UpdateType["CLOSED_CHANNEL"] = 1] = "CLOSED_CHANNEL";
  ChannelEventUpdate_UpdateType[ChannelEventUpdate_UpdateType["ACTIVE_CHANNEL"] = 2] = "ACTIVE_CHANNEL";
  ChannelEventUpdate_UpdateType[ChannelEventUpdate_UpdateType["INACTIVE_CHANNEL"] = 3] = "INACTIVE_CHANNEL";
  ChannelEventUpdate_UpdateType[ChannelEventUpdate_UpdateType["PENDING_OPEN_CHANNEL"] = 4] = "PENDING_OPEN_CHANNEL";
  ChannelEventUpdate_UpdateType[ChannelEventUpdate_UpdateType["FULLY_RESOLVED_CHANNEL"] = 5] = "FULLY_RESOLVED_CHANNEL";
  return ChannelEventUpdate_UpdateType;
}({});
/**
 * Describes the enum lnrpc.ChannelEventUpdate.UpdateType.
 */
const ChannelEventUpdate_UpdateTypeSchema = exports.ChannelEventUpdate_UpdateTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 88, 0);

/**
 * @generated from message lnrpc.WalletAccountBalance
 */

/**
 * Describes the message lnrpc.WalletAccountBalance.
 * Use `create(WalletAccountBalanceSchema)` to create a new message.
 */
const WalletAccountBalanceSchema = exports.WalletAccountBalanceSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 89);

/**
 * @generated from message lnrpc.WalletBalanceRequest
 */

/**
 * Describes the message lnrpc.WalletBalanceRequest.
 * Use `create(WalletBalanceRequestSchema)` to create a new message.
 */
const WalletBalanceRequestSchema = exports.WalletBalanceRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 90);

/**
 * @generated from message lnrpc.WalletBalanceResponse
 */

/**
 * Describes the message lnrpc.WalletBalanceResponse.
 * Use `create(WalletBalanceResponseSchema)` to create a new message.
 */
const WalletBalanceResponseSchema = exports.WalletBalanceResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 91);

/**
 * @generated from message lnrpc.Amount
 */

/**
 * Describes the message lnrpc.Amount.
 * Use `create(AmountSchema)` to create a new message.
 */
const AmountSchema = exports.AmountSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 92);

/**
 * @generated from message lnrpc.ChannelBalanceRequest
 */

/**
 * Describes the message lnrpc.ChannelBalanceRequest.
 * Use `create(ChannelBalanceRequestSchema)` to create a new message.
 */
const ChannelBalanceRequestSchema = exports.ChannelBalanceRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 93);

/**
 * @generated from message lnrpc.ChannelBalanceResponse
 */

/**
 * Describes the message lnrpc.ChannelBalanceResponse.
 * Use `create(ChannelBalanceResponseSchema)` to create a new message.
 */
const ChannelBalanceResponseSchema = exports.ChannelBalanceResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 94);

/**
 * @generated from message lnrpc.QueryRoutesRequest
 */

/**
 * Describes the message lnrpc.QueryRoutesRequest.
 * Use `create(QueryRoutesRequestSchema)` to create a new message.
 */
const QueryRoutesRequestSchema = exports.QueryRoutesRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 95);

/**
 * @generated from message lnrpc.NodePair
 */

/**
 * Describes the message lnrpc.NodePair.
 * Use `create(NodePairSchema)` to create a new message.
 */
const NodePairSchema = exports.NodePairSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 96);

/**
 * @generated from message lnrpc.EdgeLocator
 */

/**
 * Describes the message lnrpc.EdgeLocator.
 * Use `create(EdgeLocatorSchema)` to create a new message.
 */
const EdgeLocatorSchema = exports.EdgeLocatorSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 97);

/**
 * @generated from message lnrpc.QueryRoutesResponse
 */

/**
 * Describes the message lnrpc.QueryRoutesResponse.
 * Use `create(QueryRoutesResponseSchema)` to create a new message.
 */
const QueryRoutesResponseSchema = exports.QueryRoutesResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 98);

/**
 * @generated from message lnrpc.Hop
 */

/**
 * Describes the message lnrpc.Hop.
 * Use `create(HopSchema)` to create a new message.
 */
const HopSchema = exports.HopSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 99);

/**
 * @generated from message lnrpc.MPPRecord
 */

/**
 * Describes the message lnrpc.MPPRecord.
 * Use `create(MPPRecordSchema)` to create a new message.
 */
const MPPRecordSchema = exports.MPPRecordSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 100);

/**
 * @generated from message lnrpc.AMPRecord
 */

/**
 * Describes the message lnrpc.AMPRecord.
 * Use `create(AMPRecordSchema)` to create a new message.
 */
const AMPRecordSchema = exports.AMPRecordSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 101);

/**
 * 
 * A path through the channel graph which runs over one or more channels in
 * succession. This struct carries all the information required to craft the
 * Sphinx onion packet, and send the payment along the first hop in the path. A
 * route is only selected as valid if all the channels have sufficient capacity to
 * carry the initial payment amount after fees are accounted for.
 *
 * @generated from message lnrpc.Route
 */

/**
 * Describes the message lnrpc.Route.
 * Use `create(RouteSchema)` to create a new message.
 */
const RouteSchema = exports.RouteSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 102);

/**
 * @generated from message lnrpc.NodeInfoRequest
 */

/**
 * Describes the message lnrpc.NodeInfoRequest.
 * Use `create(NodeInfoRequestSchema)` to create a new message.
 */
const NodeInfoRequestSchema = exports.NodeInfoRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 103);

/**
 * @generated from message lnrpc.NodeInfo
 */

/**
 * Describes the message lnrpc.NodeInfo.
 * Use `create(NodeInfoSchema)` to create a new message.
 */
const NodeInfoSchema = exports.NodeInfoSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 104);

/**
 * 
 * An individual vertex/node within the channel graph. A node is
 * connected to other nodes by one or more channel edges emanating from it. As the
 * graph is directed, a node will also have an incoming edge attached to it for
 * each outgoing edge.
 *
 * @generated from message lnrpc.LightningNode
 */

/**
 * Describes the message lnrpc.LightningNode.
 * Use `create(LightningNodeSchema)` to create a new message.
 */
const LightningNodeSchema = exports.LightningNodeSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 105);

/**
 * @generated from message lnrpc.NodeAddress
 */

/**
 * Describes the message lnrpc.NodeAddress.
 * Use `create(NodeAddressSchema)` to create a new message.
 */
const NodeAddressSchema = exports.NodeAddressSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 106);

/**
 * @generated from message lnrpc.RoutingPolicy
 */

/**
 * Describes the message lnrpc.RoutingPolicy.
 * Use `create(RoutingPolicySchema)` to create a new message.
 */
const RoutingPolicySchema = exports.RoutingPolicySchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 107);

/**
 * 
 * A fully authenticated channel along with all its unique attributes.
 * Once an authenticated channel announcement has been processed on the network,
 * then an instance of ChannelEdgeInfo encapsulating the channels attributes is
 * stored. The other portions relevant to routing policy of a channel are stored
 * within a ChannelEdgePolicy for each direction of the channel.
 *
 * @generated from message lnrpc.ChannelEdge
 */

/**
 * Describes the message lnrpc.ChannelEdge.
 * Use `create(ChannelEdgeSchema)` to create a new message.
 */
const ChannelEdgeSchema = exports.ChannelEdgeSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 108);

/**
 * @generated from message lnrpc.ChannelGraphRequest
 */

/**
 * Describes the message lnrpc.ChannelGraphRequest.
 * Use `create(ChannelGraphRequestSchema)` to create a new message.
 */
const ChannelGraphRequestSchema = exports.ChannelGraphRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 109);

/**
 * Returns a new instance of the directed channel graph.
 *
 * @generated from message lnrpc.ChannelGraph
 */

/**
 * Describes the message lnrpc.ChannelGraph.
 * Use `create(ChannelGraphSchema)` to create a new message.
 */
const ChannelGraphSchema = exports.ChannelGraphSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 110);

/**
 * @generated from message lnrpc.NodeMetricsRequest
 */

/**
 * Describes the message lnrpc.NodeMetricsRequest.
 * Use `create(NodeMetricsRequestSchema)` to create a new message.
 */
const NodeMetricsRequestSchema = exports.NodeMetricsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 111);

/**
 * @generated from message lnrpc.NodeMetricsResponse
 */

/**
 * Describes the message lnrpc.NodeMetricsResponse.
 * Use `create(NodeMetricsResponseSchema)` to create a new message.
 */
const NodeMetricsResponseSchema = exports.NodeMetricsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 112);

/**
 * @generated from message lnrpc.FloatMetric
 */

/**
 * Describes the message lnrpc.FloatMetric.
 * Use `create(FloatMetricSchema)` to create a new message.
 */
const FloatMetricSchema = exports.FloatMetricSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 113);

/**
 * @generated from message lnrpc.ChanInfoRequest
 */

/**
 * Describes the message lnrpc.ChanInfoRequest.
 * Use `create(ChanInfoRequestSchema)` to create a new message.
 */
const ChanInfoRequestSchema = exports.ChanInfoRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 114);

/**
 * @generated from message lnrpc.NetworkInfoRequest
 */

/**
 * Describes the message lnrpc.NetworkInfoRequest.
 * Use `create(NetworkInfoRequestSchema)` to create a new message.
 */
const NetworkInfoRequestSchema = exports.NetworkInfoRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 115);

/**
 * @generated from message lnrpc.NetworkInfo
 */

/**
 * Describes the message lnrpc.NetworkInfo.
 * Use `create(NetworkInfoSchema)` to create a new message.
 */
const NetworkInfoSchema = exports.NetworkInfoSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 116);

/**
 * @generated from message lnrpc.StopRequest
 */

/**
 * Describes the message lnrpc.StopRequest.
 * Use `create(StopRequestSchema)` to create a new message.
 */
const StopRequestSchema = exports.StopRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 117);

/**
 * @generated from message lnrpc.StopResponse
 */

/**
 * Describes the message lnrpc.StopResponse.
 * Use `create(StopResponseSchema)` to create a new message.
 */
const StopResponseSchema = exports.StopResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 118);

/**
 * @generated from message lnrpc.GraphTopologySubscription
 */

/**
 * Describes the message lnrpc.GraphTopologySubscription.
 * Use `create(GraphTopologySubscriptionSchema)` to create a new message.
 */
const GraphTopologySubscriptionSchema = exports.GraphTopologySubscriptionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 119);

/**
 * @generated from message lnrpc.GraphTopologyUpdate
 */

/**
 * Describes the message lnrpc.GraphTopologyUpdate.
 * Use `create(GraphTopologyUpdateSchema)` to create a new message.
 */
const GraphTopologyUpdateSchema = exports.GraphTopologyUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 120);

/**
 * @generated from message lnrpc.NodeUpdate
 */

/**
 * Describes the message lnrpc.NodeUpdate.
 * Use `create(NodeUpdateSchema)` to create a new message.
 */
const NodeUpdateSchema = exports.NodeUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 121);

/**
 * @generated from message lnrpc.ChannelEdgeUpdate
 */

/**
 * Describes the message lnrpc.ChannelEdgeUpdate.
 * Use `create(ChannelEdgeUpdateSchema)` to create a new message.
 */
const ChannelEdgeUpdateSchema = exports.ChannelEdgeUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 122);

/**
 * @generated from message lnrpc.ClosedChannelUpdate
 */

/**
 * Describes the message lnrpc.ClosedChannelUpdate.
 * Use `create(ClosedChannelUpdateSchema)` to create a new message.
 */
const ClosedChannelUpdateSchema = exports.ClosedChannelUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 123);

/**
 * @generated from message lnrpc.HopHint
 */

/**
 * Describes the message lnrpc.HopHint.
 * Use `create(HopHintSchema)` to create a new message.
 */
const HopHintSchema = exports.HopHintSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 124);

/**
 * @generated from message lnrpc.SetID
 */

/**
 * Describes the message lnrpc.SetID.
 * Use `create(SetIDSchema)` to create a new message.
 */
const SetIDSchema = exports.SetIDSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 125);

/**
 * @generated from message lnrpc.RouteHint
 */

/**
 * Describes the message lnrpc.RouteHint.
 * Use `create(RouteHintSchema)` to create a new message.
 */
const RouteHintSchema = exports.RouteHintSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 126);

/**
 * @generated from message lnrpc.AMPInvoiceState
 */

/**
 * Describes the message lnrpc.AMPInvoiceState.
 * Use `create(AMPInvoiceStateSchema)` to create a new message.
 */
const AMPInvoiceStateSchema = exports.AMPInvoiceStateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 127);

/**
 * @generated from message lnrpc.Invoice
 */

/**
 * Describes the message lnrpc.Invoice.
 * Use `create(InvoiceSchema)` to create a new message.
 */
const InvoiceSchema = exports.InvoiceSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 128);

/**
 * @generated from enum lnrpc.Invoice.InvoiceState
 */
let Invoice_InvoiceState = exports.Invoice_InvoiceState = /*#__PURE__*/function (Invoice_InvoiceState) {
  Invoice_InvoiceState[Invoice_InvoiceState["OPEN"] = 0] = "OPEN";
  Invoice_InvoiceState[Invoice_InvoiceState["SETTLED"] = 1] = "SETTLED";
  Invoice_InvoiceState[Invoice_InvoiceState["CANCELED"] = 2] = "CANCELED";
  Invoice_InvoiceState[Invoice_InvoiceState["ACCEPTED"] = 3] = "ACCEPTED";
  return Invoice_InvoiceState;
}({});
/**
 * Describes the enum lnrpc.Invoice.InvoiceState.
 */
const Invoice_InvoiceStateSchema = exports.Invoice_InvoiceStateSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 128, 0);

/**
 * Details of an HTLC that paid to an invoice
 *
 * @generated from message lnrpc.InvoiceHTLC
 */

/**
 * Describes the message lnrpc.InvoiceHTLC.
 * Use `create(InvoiceHTLCSchema)` to create a new message.
 */
const InvoiceHTLCSchema = exports.InvoiceHTLCSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 129);

/**
 * Details specific to AMP HTLCs.
 *
 * @generated from message lnrpc.AMP
 */

/**
 * Describes the message lnrpc.AMP.
 * Use `create(AMPSchema)` to create a new message.
 */
const AMPSchema = exports.AMPSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 130);

/**
 * @generated from message lnrpc.AddInvoiceResponse
 */

/**
 * Describes the message lnrpc.AddInvoiceResponse.
 * Use `create(AddInvoiceResponseSchema)` to create a new message.
 */
const AddInvoiceResponseSchema = exports.AddInvoiceResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 131);

/**
 * @generated from message lnrpc.PaymentHash
 */

/**
 * Describes the message lnrpc.PaymentHash.
 * Use `create(PaymentHashSchema)` to create a new message.
 */
const PaymentHashSchema = exports.PaymentHashSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 132);

/**
 * @generated from message lnrpc.ListInvoiceRequest
 */

/**
 * Describes the message lnrpc.ListInvoiceRequest.
 * Use `create(ListInvoiceRequestSchema)` to create a new message.
 */
const ListInvoiceRequestSchema = exports.ListInvoiceRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 133);

/**
 * @generated from message lnrpc.ListInvoiceResponse
 */

/**
 * Describes the message lnrpc.ListInvoiceResponse.
 * Use `create(ListInvoiceResponseSchema)` to create a new message.
 */
const ListInvoiceResponseSchema = exports.ListInvoiceResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 134);

/**
 * @generated from message lnrpc.InvoiceSubscription
 */

/**
 * Describes the message lnrpc.InvoiceSubscription.
 * Use `create(InvoiceSubscriptionSchema)` to create a new message.
 */
const InvoiceSubscriptionSchema = exports.InvoiceSubscriptionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 135);

/**
 * @generated from message lnrpc.Payment
 */

/**
 * Describes the message lnrpc.Payment.
 * Use `create(PaymentSchema)` to create a new message.
 */
const PaymentSchema = exports.PaymentSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 136);

/**
 * @generated from enum lnrpc.Payment.PaymentStatus
 */
let Payment_PaymentStatus = exports.Payment_PaymentStatus = /*#__PURE__*/function (Payment_PaymentStatus) {
  Payment_PaymentStatus[Payment_PaymentStatus["UNKNOWN"] = 0] = "UNKNOWN";
  Payment_PaymentStatus[Payment_PaymentStatus["IN_FLIGHT"] = 1] = "IN_FLIGHT";
  Payment_PaymentStatus[Payment_PaymentStatus["SUCCEEDED"] = 2] = "SUCCEEDED";
  Payment_PaymentStatus[Payment_PaymentStatus["FAILED"] = 3] = "FAILED";
  return Payment_PaymentStatus;
}({});
/**
 * Describes the enum lnrpc.Payment.PaymentStatus.
 */
const Payment_PaymentStatusSchema = exports.Payment_PaymentStatusSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 136, 0);

/**
 * @generated from message lnrpc.HTLCAttempt
 */

/**
 * Describes the message lnrpc.HTLCAttempt.
 * Use `create(HTLCAttemptSchema)` to create a new message.
 */
const HTLCAttemptSchema = exports.HTLCAttemptSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 137);

/**
 * @generated from enum lnrpc.HTLCAttempt.HTLCStatus
 */
let HTLCAttempt_HTLCStatus = exports.HTLCAttempt_HTLCStatus = /*#__PURE__*/function (HTLCAttempt_HTLCStatus) {
  HTLCAttempt_HTLCStatus[HTLCAttempt_HTLCStatus["IN_FLIGHT"] = 0] = "IN_FLIGHT";
  HTLCAttempt_HTLCStatus[HTLCAttempt_HTLCStatus["SUCCEEDED"] = 1] = "SUCCEEDED";
  HTLCAttempt_HTLCStatus[HTLCAttempt_HTLCStatus["FAILED"] = 2] = "FAILED";
  return HTLCAttempt_HTLCStatus;
}({});
/**
 * Describes the enum lnrpc.HTLCAttempt.HTLCStatus.
 */
const HTLCAttempt_HTLCStatusSchema = exports.HTLCAttempt_HTLCStatusSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 137, 0);

/**
 * @generated from message lnrpc.ListPaymentsRequest
 */

/**
 * Describes the message lnrpc.ListPaymentsRequest.
 * Use `create(ListPaymentsRequestSchema)` to create a new message.
 */
const ListPaymentsRequestSchema = exports.ListPaymentsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 138);

/**
 * @generated from message lnrpc.ListPaymentsResponse
 */

/**
 * Describes the message lnrpc.ListPaymentsResponse.
 * Use `create(ListPaymentsResponseSchema)` to create a new message.
 */
const ListPaymentsResponseSchema = exports.ListPaymentsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 139);

/**
 * @generated from message lnrpc.DeletePaymentRequest
 */

/**
 * Describes the message lnrpc.DeletePaymentRequest.
 * Use `create(DeletePaymentRequestSchema)` to create a new message.
 */
const DeletePaymentRequestSchema = exports.DeletePaymentRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 140);

/**
 * @generated from message lnrpc.DeleteAllPaymentsRequest
 */

/**
 * Describes the message lnrpc.DeleteAllPaymentsRequest.
 * Use `create(DeleteAllPaymentsRequestSchema)` to create a new message.
 */
const DeleteAllPaymentsRequestSchema = exports.DeleteAllPaymentsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 141);

/**
 * @generated from message lnrpc.DeletePaymentResponse
 */

/**
 * Describes the message lnrpc.DeletePaymentResponse.
 * Use `create(DeletePaymentResponseSchema)` to create a new message.
 */
const DeletePaymentResponseSchema = exports.DeletePaymentResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 142);

/**
 * @generated from message lnrpc.DeleteAllPaymentsResponse
 */

/**
 * Describes the message lnrpc.DeleteAllPaymentsResponse.
 * Use `create(DeleteAllPaymentsResponseSchema)` to create a new message.
 */
const DeleteAllPaymentsResponseSchema = exports.DeleteAllPaymentsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 143);

/**
 * @generated from message lnrpc.AbandonChannelRequest
 */

/**
 * Describes the message lnrpc.AbandonChannelRequest.
 * Use `create(AbandonChannelRequestSchema)` to create a new message.
 */
const AbandonChannelRequestSchema = exports.AbandonChannelRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 144);

/**
 * @generated from message lnrpc.AbandonChannelResponse
 */

/**
 * Describes the message lnrpc.AbandonChannelResponse.
 * Use `create(AbandonChannelResponseSchema)` to create a new message.
 */
const AbandonChannelResponseSchema = exports.AbandonChannelResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 145);

/**
 * @generated from message lnrpc.DebugLevelRequest
 */

/**
 * Describes the message lnrpc.DebugLevelRequest.
 * Use `create(DebugLevelRequestSchema)` to create a new message.
 */
const DebugLevelRequestSchema = exports.DebugLevelRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 146);

/**
 * @generated from message lnrpc.DebugLevelResponse
 */

/**
 * Describes the message lnrpc.DebugLevelResponse.
 * Use `create(DebugLevelResponseSchema)` to create a new message.
 */
const DebugLevelResponseSchema = exports.DebugLevelResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 147);

/**
 * @generated from message lnrpc.PayReqString
 */

/**
 * Describes the message lnrpc.PayReqString.
 * Use `create(PayReqStringSchema)` to create a new message.
 */
const PayReqStringSchema = exports.PayReqStringSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 148);

/**
 * @generated from message lnrpc.PayReq
 */

/**
 * Describes the message lnrpc.PayReq.
 * Use `create(PayReqSchema)` to create a new message.
 */
const PayReqSchema = exports.PayReqSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 149);

/**
 * @generated from message lnrpc.Feature
 */

/**
 * Describes the message lnrpc.Feature.
 * Use `create(FeatureSchema)` to create a new message.
 */
const FeatureSchema = exports.FeatureSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 150);

/**
 * @generated from message lnrpc.FeeReportRequest
 */

/**
 * Describes the message lnrpc.FeeReportRequest.
 * Use `create(FeeReportRequestSchema)` to create a new message.
 */
const FeeReportRequestSchema = exports.FeeReportRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 151);

/**
 * @generated from message lnrpc.ChannelFeeReport
 */

/**
 * Describes the message lnrpc.ChannelFeeReport.
 * Use `create(ChannelFeeReportSchema)` to create a new message.
 */
const ChannelFeeReportSchema = exports.ChannelFeeReportSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 152);

/**
 * @generated from message lnrpc.FeeReportResponse
 */

/**
 * Describes the message lnrpc.FeeReportResponse.
 * Use `create(FeeReportResponseSchema)` to create a new message.
 */
const FeeReportResponseSchema = exports.FeeReportResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 153);

/**
 * @generated from message lnrpc.PolicyUpdateRequest
 */

/**
 * Describes the message lnrpc.PolicyUpdateRequest.
 * Use `create(PolicyUpdateRequestSchema)` to create a new message.
 */
const PolicyUpdateRequestSchema = exports.PolicyUpdateRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 154);

/**
 * @generated from message lnrpc.FailedUpdate
 */

/**
 * Describes the message lnrpc.FailedUpdate.
 * Use `create(FailedUpdateSchema)` to create a new message.
 */
const FailedUpdateSchema = exports.FailedUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 155);

/**
 * @generated from message lnrpc.PolicyUpdateResponse
 */

/**
 * Describes the message lnrpc.PolicyUpdateResponse.
 * Use `create(PolicyUpdateResponseSchema)` to create a new message.
 */
const PolicyUpdateResponseSchema = exports.PolicyUpdateResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 156);

/**
 * @generated from message lnrpc.ForwardingHistoryRequest
 */

/**
 * Describes the message lnrpc.ForwardingHistoryRequest.
 * Use `create(ForwardingHistoryRequestSchema)` to create a new message.
 */
const ForwardingHistoryRequestSchema = exports.ForwardingHistoryRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 157);

/**
 * @generated from message lnrpc.ForwardingEvent
 */

/**
 * Describes the message lnrpc.ForwardingEvent.
 * Use `create(ForwardingEventSchema)` to create a new message.
 */
const ForwardingEventSchema = exports.ForwardingEventSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 158);

/**
 * @generated from message lnrpc.ForwardingHistoryResponse
 */

/**
 * Describes the message lnrpc.ForwardingHistoryResponse.
 * Use `create(ForwardingHistoryResponseSchema)` to create a new message.
 */
const ForwardingHistoryResponseSchema = exports.ForwardingHistoryResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 159);

/**
 * @generated from message lnrpc.ExportChannelBackupRequest
 */

/**
 * Describes the message lnrpc.ExportChannelBackupRequest.
 * Use `create(ExportChannelBackupRequestSchema)` to create a new message.
 */
const ExportChannelBackupRequestSchema = exports.ExportChannelBackupRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 160);

/**
 * @generated from message lnrpc.ChannelBackup
 */

/**
 * Describes the message lnrpc.ChannelBackup.
 * Use `create(ChannelBackupSchema)` to create a new message.
 */
const ChannelBackupSchema = exports.ChannelBackupSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 161);

/**
 * @generated from message lnrpc.MultiChanBackup
 */

/**
 * Describes the message lnrpc.MultiChanBackup.
 * Use `create(MultiChanBackupSchema)` to create a new message.
 */
const MultiChanBackupSchema = exports.MultiChanBackupSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 162);

/**
 * @generated from message lnrpc.ChanBackupExportRequest
 */

/**
 * Describes the message lnrpc.ChanBackupExportRequest.
 * Use `create(ChanBackupExportRequestSchema)` to create a new message.
 */
const ChanBackupExportRequestSchema = exports.ChanBackupExportRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 163);

/**
 * @generated from message lnrpc.ChanBackupSnapshot
 */

/**
 * Describes the message lnrpc.ChanBackupSnapshot.
 * Use `create(ChanBackupSnapshotSchema)` to create a new message.
 */
const ChanBackupSnapshotSchema = exports.ChanBackupSnapshotSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 164);

/**
 * @generated from message lnrpc.ChannelBackups
 */

/**
 * Describes the message lnrpc.ChannelBackups.
 * Use `create(ChannelBackupsSchema)` to create a new message.
 */
const ChannelBackupsSchema = exports.ChannelBackupsSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 165);

/**
 * @generated from message lnrpc.RestoreChanBackupRequest
 */

/**
 * Describes the message lnrpc.RestoreChanBackupRequest.
 * Use `create(RestoreChanBackupRequestSchema)` to create a new message.
 */
const RestoreChanBackupRequestSchema = exports.RestoreChanBackupRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 166);

/**
 * @generated from message lnrpc.RestoreBackupResponse
 */

/**
 * Describes the message lnrpc.RestoreBackupResponse.
 * Use `create(RestoreBackupResponseSchema)` to create a new message.
 */
const RestoreBackupResponseSchema = exports.RestoreBackupResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 167);

/**
 * @generated from message lnrpc.ChannelBackupSubscription
 */

/**
 * Describes the message lnrpc.ChannelBackupSubscription.
 * Use `create(ChannelBackupSubscriptionSchema)` to create a new message.
 */
const ChannelBackupSubscriptionSchema = exports.ChannelBackupSubscriptionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 168);

/**
 * @generated from message lnrpc.VerifyChanBackupResponse
 */

/**
 * Describes the message lnrpc.VerifyChanBackupResponse.
 * Use `create(VerifyChanBackupResponseSchema)` to create a new message.
 */
const VerifyChanBackupResponseSchema = exports.VerifyChanBackupResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 169);

/**
 * @generated from message lnrpc.MacaroonPermission
 */

/**
 * Describes the message lnrpc.MacaroonPermission.
 * Use `create(MacaroonPermissionSchema)` to create a new message.
 */
const MacaroonPermissionSchema = exports.MacaroonPermissionSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 170);

/**
 * @generated from message lnrpc.BakeMacaroonRequest
 */

/**
 * Describes the message lnrpc.BakeMacaroonRequest.
 * Use `create(BakeMacaroonRequestSchema)` to create a new message.
 */
const BakeMacaroonRequestSchema = exports.BakeMacaroonRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 171);

/**
 * @generated from message lnrpc.BakeMacaroonResponse
 */

/**
 * Describes the message lnrpc.BakeMacaroonResponse.
 * Use `create(BakeMacaroonResponseSchema)` to create a new message.
 */
const BakeMacaroonResponseSchema = exports.BakeMacaroonResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 172);

/**
 * @generated from message lnrpc.ListMacaroonIDsRequest
 */

/**
 * Describes the message lnrpc.ListMacaroonIDsRequest.
 * Use `create(ListMacaroonIDsRequestSchema)` to create a new message.
 */
const ListMacaroonIDsRequestSchema = exports.ListMacaroonIDsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 173);

/**
 * @generated from message lnrpc.ListMacaroonIDsResponse
 */

/**
 * Describes the message lnrpc.ListMacaroonIDsResponse.
 * Use `create(ListMacaroonIDsResponseSchema)` to create a new message.
 */
const ListMacaroonIDsResponseSchema = exports.ListMacaroonIDsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 174);

/**
 * @generated from message lnrpc.DeleteMacaroonIDRequest
 */

/**
 * Describes the message lnrpc.DeleteMacaroonIDRequest.
 * Use `create(DeleteMacaroonIDRequestSchema)` to create a new message.
 */
const DeleteMacaroonIDRequestSchema = exports.DeleteMacaroonIDRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 175);

/**
 * @generated from message lnrpc.DeleteMacaroonIDResponse
 */

/**
 * Describes the message lnrpc.DeleteMacaroonIDResponse.
 * Use `create(DeleteMacaroonIDResponseSchema)` to create a new message.
 */
const DeleteMacaroonIDResponseSchema = exports.DeleteMacaroonIDResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 176);

/**
 * @generated from message lnrpc.MacaroonPermissionList
 */

/**
 * Describes the message lnrpc.MacaroonPermissionList.
 * Use `create(MacaroonPermissionListSchema)` to create a new message.
 */
const MacaroonPermissionListSchema = exports.MacaroonPermissionListSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 177);

/**
 * @generated from message lnrpc.ListPermissionsRequest
 */

/**
 * Describes the message lnrpc.ListPermissionsRequest.
 * Use `create(ListPermissionsRequestSchema)` to create a new message.
 */
const ListPermissionsRequestSchema = exports.ListPermissionsRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 178);

/**
 * @generated from message lnrpc.ListPermissionsResponse
 */

/**
 * Describes the message lnrpc.ListPermissionsResponse.
 * Use `create(ListPermissionsResponseSchema)` to create a new message.
 */
const ListPermissionsResponseSchema = exports.ListPermissionsResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 179);

/**
 * @generated from message lnrpc.Failure
 */

/**
 * Describes the message lnrpc.Failure.
 * Use `create(FailureSchema)` to create a new message.
 */
const FailureSchema = exports.FailureSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 180);

/**
 * @generated from enum lnrpc.Failure.FailureCode
 */
let Failure_FailureCode = exports.Failure_FailureCode = /*#__PURE__*/function (Failure_FailureCode) {
  Failure_FailureCode[Failure_FailureCode["RESERVED"] = 0] = "RESERVED";
  Failure_FailureCode[Failure_FailureCode["INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS"] = 1] = "INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS";
  Failure_FailureCode[Failure_FailureCode["INCORRECT_PAYMENT_AMOUNT"] = 2] = "INCORRECT_PAYMENT_AMOUNT";
  Failure_FailureCode[Failure_FailureCode["FINAL_INCORRECT_CLTV_EXPIRY"] = 3] = "FINAL_INCORRECT_CLTV_EXPIRY";
  Failure_FailureCode[Failure_FailureCode["FINAL_INCORRECT_HTLC_AMOUNT"] = 4] = "FINAL_INCORRECT_HTLC_AMOUNT";
  Failure_FailureCode[Failure_FailureCode["FINAL_EXPIRY_TOO_SOON"] = 5] = "FINAL_EXPIRY_TOO_SOON";
  Failure_FailureCode[Failure_FailureCode["INVALID_REALM"] = 6] = "INVALID_REALM";
  Failure_FailureCode[Failure_FailureCode["EXPIRY_TOO_SOON"] = 7] = "EXPIRY_TOO_SOON";
  Failure_FailureCode[Failure_FailureCode["INVALID_ONION_VERSION"] = 8] = "INVALID_ONION_VERSION";
  Failure_FailureCode[Failure_FailureCode["INVALID_ONION_HMAC"] = 9] = "INVALID_ONION_HMAC";
  Failure_FailureCode[Failure_FailureCode["INVALID_ONION_KEY"] = 10] = "INVALID_ONION_KEY";
  Failure_FailureCode[Failure_FailureCode["AMOUNT_BELOW_MINIMUM"] = 11] = "AMOUNT_BELOW_MINIMUM";
  Failure_FailureCode[Failure_FailureCode["FEE_INSUFFICIENT"] = 12] = "FEE_INSUFFICIENT";
  Failure_FailureCode[Failure_FailureCode["INCORRECT_CLTV_EXPIRY"] = 13] = "INCORRECT_CLTV_EXPIRY";
  Failure_FailureCode[Failure_FailureCode["CHANNEL_DISABLED"] = 14] = "CHANNEL_DISABLED";
  Failure_FailureCode[Failure_FailureCode["TEMPORARY_CHANNEL_FAILURE"] = 15] = "TEMPORARY_CHANNEL_FAILURE";
  Failure_FailureCode[Failure_FailureCode["REQUIRED_NODE_FEATURE_MISSING"] = 16] = "REQUIRED_NODE_FEATURE_MISSING";
  Failure_FailureCode[Failure_FailureCode["REQUIRED_CHANNEL_FEATURE_MISSING"] = 17] = "REQUIRED_CHANNEL_FEATURE_MISSING";
  Failure_FailureCode[Failure_FailureCode["UNKNOWN_NEXT_PEER"] = 18] = "UNKNOWN_NEXT_PEER";
  Failure_FailureCode[Failure_FailureCode["TEMPORARY_NODE_FAILURE"] = 19] = "TEMPORARY_NODE_FAILURE";
  Failure_FailureCode[Failure_FailureCode["PERMANENT_NODE_FAILURE"] = 20] = "PERMANENT_NODE_FAILURE";
  Failure_FailureCode[Failure_FailureCode["PERMANENT_CHANNEL_FAILURE"] = 21] = "PERMANENT_CHANNEL_FAILURE";
  Failure_FailureCode[Failure_FailureCode["EXPIRY_TOO_FAR"] = 22] = "EXPIRY_TOO_FAR";
  Failure_FailureCode[Failure_FailureCode["MPP_TIMEOUT"] = 23] = "MPP_TIMEOUT";
  Failure_FailureCode[Failure_FailureCode["INVALID_ONION_PAYLOAD"] = 24] = "INVALID_ONION_PAYLOAD";
  Failure_FailureCode[Failure_FailureCode["INTERNAL_FAILURE"] = 997] = "INTERNAL_FAILURE";
  Failure_FailureCode[Failure_FailureCode["UNKNOWN_FAILURE"] = 998] = "UNKNOWN_FAILURE";
  Failure_FailureCode[Failure_FailureCode["UNREADABLE_FAILURE"] = 999] = "UNREADABLE_FAILURE";
  return Failure_FailureCode;
}({});
/**
 * Describes the enum lnrpc.Failure.FailureCode.
 */
const Failure_FailureCodeSchema = exports.Failure_FailureCodeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 180, 0);

/**
 * @generated from message lnrpc.ChannelUpdate
 */

/**
 * Describes the message lnrpc.ChannelUpdate.
 * Use `create(ChannelUpdateSchema)` to create a new message.
 */
const ChannelUpdateSchema = exports.ChannelUpdateSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 181);

/**
 * @generated from message lnrpc.MacaroonId
 */

/**
 * Describes the message lnrpc.MacaroonId.
 * Use `create(MacaroonIdSchema)` to create a new message.
 */
const MacaroonIdSchema = exports.MacaroonIdSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 182);

/**
 * @generated from message lnrpc.Op
 */

/**
 * Describes the message lnrpc.Op.
 * Use `create(OpSchema)` to create a new message.
 */
const OpSchema = exports.OpSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 183);

/**
 * @generated from message lnrpc.CheckMacPermRequest
 */

/**
 * Describes the message lnrpc.CheckMacPermRequest.
 * Use `create(CheckMacPermRequestSchema)` to create a new message.
 */
const CheckMacPermRequestSchema = exports.CheckMacPermRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 184);

/**
 * @generated from message lnrpc.CheckMacPermResponse
 */

/**
 * Describes the message lnrpc.CheckMacPermResponse.
 * Use `create(CheckMacPermResponseSchema)` to create a new message.
 */
const CheckMacPermResponseSchema = exports.CheckMacPermResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 185);

/**
 * @generated from message lnrpc.RPCMiddlewareRequest
 */

/**
 * Describes the message lnrpc.RPCMiddlewareRequest.
 * Use `create(RPCMiddlewareRequestSchema)` to create a new message.
 */
const RPCMiddlewareRequestSchema = exports.RPCMiddlewareRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 186);

/**
 * @generated from message lnrpc.StreamAuth
 */

/**
 * Describes the message lnrpc.StreamAuth.
 * Use `create(StreamAuthSchema)` to create a new message.
 */
const StreamAuthSchema = exports.StreamAuthSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 187);

/**
 * @generated from message lnrpc.RPCMessage
 */

/**
 * Describes the message lnrpc.RPCMessage.
 * Use `create(RPCMessageSchema)` to create a new message.
 */
const RPCMessageSchema = exports.RPCMessageSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 188);

/**
 * @generated from message lnrpc.RPCMiddlewareResponse
 */

/**
 * Describes the message lnrpc.RPCMiddlewareResponse.
 * Use `create(RPCMiddlewareResponseSchema)` to create a new message.
 */
const RPCMiddlewareResponseSchema = exports.RPCMiddlewareResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 189);

/**
 * @generated from message lnrpc.MiddlewareRegistration
 */

/**
 * Describes the message lnrpc.MiddlewareRegistration.
 * Use `create(MiddlewareRegistrationSchema)` to create a new message.
 */
const MiddlewareRegistrationSchema = exports.MiddlewareRegistrationSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 190);

/**
 * @generated from message lnrpc.InterceptFeedback
 */

/**
 * Describes the message lnrpc.InterceptFeedback.
 * Use `create(InterceptFeedbackSchema)` to create a new message.
 */
const InterceptFeedbackSchema = exports.InterceptFeedbackSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_lightning, 191);

/**
 * @generated from enum lnrpc.OutputScriptType
 */
let OutputScriptType = exports.OutputScriptType = /*#__PURE__*/function (OutputScriptType) {
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_PUBKEY_HASH"] = 0] = "SCRIPT_TYPE_PUBKEY_HASH";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_SCRIPT_HASH"] = 1] = "SCRIPT_TYPE_SCRIPT_HASH";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_WITNESS_V0_PUBKEY_HASH"] = 2] = "SCRIPT_TYPE_WITNESS_V0_PUBKEY_HASH";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_WITNESS_V0_SCRIPT_HASH"] = 3] = "SCRIPT_TYPE_WITNESS_V0_SCRIPT_HASH";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_PUBKEY"] = 4] = "SCRIPT_TYPE_PUBKEY";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_MULTISIG"] = 5] = "SCRIPT_TYPE_MULTISIG";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_NULLDATA"] = 6] = "SCRIPT_TYPE_NULLDATA";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_NON_STANDARD"] = 7] = "SCRIPT_TYPE_NON_STANDARD";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_WITNESS_UNKNOWN"] = 8] = "SCRIPT_TYPE_WITNESS_UNKNOWN";
  OutputScriptType[OutputScriptType["SCRIPT_TYPE_WITNESS_V1_TAPROOT"] = 9] = "SCRIPT_TYPE_WITNESS_V1_TAPROOT";
  return OutputScriptType;
}({});
/**
 * Describes the enum lnrpc.OutputScriptType.
 */
const OutputScriptTypeSchema = exports.OutputScriptTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 0);

/**
 * 
 * `AddressType` has to be one of:
 * 
 * - `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
 * - `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
 * - `p2tr`: Pay to taproot pubkey (`TAPROOT_PUBKEY` = 4)
 *
 * @generated from enum lnrpc.AddressType
 */
let AddressType = exports.AddressType = /*#__PURE__*/function (AddressType) {
  AddressType[AddressType["WITNESS_PUBKEY_HASH"] = 0] = "WITNESS_PUBKEY_HASH";
  AddressType[AddressType["NESTED_PUBKEY_HASH"] = 1] = "NESTED_PUBKEY_HASH";
  AddressType[AddressType["UNUSED_WITNESS_PUBKEY_HASH"] = 2] = "UNUSED_WITNESS_PUBKEY_HASH";
  AddressType[AddressType["UNUSED_NESTED_PUBKEY_HASH"] = 3] = "UNUSED_NESTED_PUBKEY_HASH";
  AddressType[AddressType["TAPROOT_PUBKEY"] = 4] = "TAPROOT_PUBKEY";
  AddressType[AddressType["UNUSED_TAPROOT_PUBKEY"] = 5] = "UNUSED_TAPROOT_PUBKEY";
  return AddressType;
}({});
/**
 * Describes the enum lnrpc.AddressType.
 */
const AddressTypeSchema = exports.AddressTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 1);

/**
 * @generated from enum lnrpc.CommitmentType
 */
let CommitmentType = exports.CommitmentType = /*#__PURE__*/function (CommitmentType) {
  CommitmentType[CommitmentType["UNKNOWN_COMMITMENT_TYPE"] = 0] = "UNKNOWN_COMMITMENT_TYPE";
  CommitmentType[CommitmentType["LEGACY"] = 1] = "LEGACY";
  CommitmentType[CommitmentType["STATIC_REMOTE_KEY"] = 2] = "STATIC_REMOTE_KEY";
  CommitmentType[CommitmentType["ANCHORS"] = 3] = "ANCHORS";
  CommitmentType[CommitmentType["SCRIPT_ENFORCED_LEASE"] = 4] = "SCRIPT_ENFORCED_LEASE";
  CommitmentType[CommitmentType["SIMPLE_TAPROOT"] = 5] = "SIMPLE_TAPROOT";
  return CommitmentType;
}({});
/**
 * Describes the enum lnrpc.CommitmentType.
 */
const CommitmentTypeSchema = exports.CommitmentTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 2);

/**
 * @generated from enum lnrpc.Initiator
 */
let Initiator = exports.Initiator = /*#__PURE__*/function (Initiator) {
  Initiator[Initiator["UNKNOWN"] = 0] = "UNKNOWN";
  Initiator[Initiator["LOCAL"] = 1] = "LOCAL";
  Initiator[Initiator["REMOTE"] = 2] = "REMOTE";
  Initiator[Initiator["BOTH"] = 3] = "BOTH";
  return Initiator;
}({});
/**
 * Describes the enum lnrpc.Initiator.
 */
const InitiatorSchema = exports.InitiatorSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 3);

/**
 * @generated from enum lnrpc.ResolutionType
 */
let ResolutionType = exports.ResolutionType = /*#__PURE__*/function (ResolutionType) {
  ResolutionType[ResolutionType["TYPE_UNKNOWN"] = 0] = "TYPE_UNKNOWN";
  ResolutionType[ResolutionType["ANCHOR"] = 1] = "ANCHOR";
  ResolutionType[ResolutionType["INCOMING_HTLC"] = 2] = "INCOMING_HTLC";
  ResolutionType[ResolutionType["OUTGOING_HTLC"] = 3] = "OUTGOING_HTLC";
  ResolutionType[ResolutionType["COMMIT"] = 4] = "COMMIT";
  return ResolutionType;
}({});
/**
 * Describes the enum lnrpc.ResolutionType.
 */
const ResolutionTypeSchema = exports.ResolutionTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 4);

/**
 * @generated from enum lnrpc.ResolutionOutcome
 */
let ResolutionOutcome = exports.ResolutionOutcome = /*#__PURE__*/function (ResolutionOutcome) {
  ResolutionOutcome[ResolutionOutcome["OUTCOME_UNKNOWN"] = 0] = "OUTCOME_UNKNOWN";
  ResolutionOutcome[ResolutionOutcome["CLAIMED"] = 1] = "CLAIMED";
  ResolutionOutcome[ResolutionOutcome["UNCLAIMED"] = 2] = "UNCLAIMED";
  ResolutionOutcome[ResolutionOutcome["ABANDONED"] = 3] = "ABANDONED";
  ResolutionOutcome[ResolutionOutcome["FIRST_STAGE"] = 4] = "FIRST_STAGE";
  ResolutionOutcome[ResolutionOutcome["TIMEOUT"] = 5] = "TIMEOUT";
  return ResolutionOutcome;
}({});
/**
 * Describes the enum lnrpc.ResolutionOutcome.
 */
const ResolutionOutcomeSchema = exports.ResolutionOutcomeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 5);

/**
 * @generated from enum lnrpc.NodeMetricType
 */
let NodeMetricType = exports.NodeMetricType = /*#__PURE__*/function (NodeMetricType) {
  NodeMetricType[NodeMetricType["UNKNOWN"] = 0] = "UNKNOWN";
  NodeMetricType[NodeMetricType["BETWEENNESS_CENTRALITY"] = 1] = "BETWEENNESS_CENTRALITY";
  return NodeMetricType;
}({});
/**
 * Describes the enum lnrpc.NodeMetricType.
 */
const NodeMetricTypeSchema = exports.NodeMetricTypeSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 6);

/**
 * @generated from enum lnrpc.InvoiceHTLCState
 */
let InvoiceHTLCState = exports.InvoiceHTLCState = /*#__PURE__*/function (InvoiceHTLCState) {
  InvoiceHTLCState[InvoiceHTLCState["ACCEPTED"] = 0] = "ACCEPTED";
  InvoiceHTLCState[InvoiceHTLCState["SETTLED"] = 1] = "SETTLED";
  InvoiceHTLCState[InvoiceHTLCState["CANCELED"] = 2] = "CANCELED";
  return InvoiceHTLCState;
}({});
/**
 * Describes the enum lnrpc.InvoiceHTLCState.
 */
const InvoiceHTLCStateSchema = exports.InvoiceHTLCStateSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 7);

/**
 * @generated from enum lnrpc.PaymentFailureReason
 */
let PaymentFailureReason = exports.PaymentFailureReason = /*#__PURE__*/function (PaymentFailureReason) {
  PaymentFailureReason[PaymentFailureReason["FAILURE_REASON_NONE"] = 0] = "FAILURE_REASON_NONE";
  PaymentFailureReason[PaymentFailureReason["FAILURE_REASON_TIMEOUT"] = 1] = "FAILURE_REASON_TIMEOUT";
  PaymentFailureReason[PaymentFailureReason["FAILURE_REASON_NO_ROUTE"] = 2] = "FAILURE_REASON_NO_ROUTE";
  PaymentFailureReason[PaymentFailureReason["FAILURE_REASON_ERROR"] = 3] = "FAILURE_REASON_ERROR";
  PaymentFailureReason[PaymentFailureReason["FAILURE_REASON_INCORRECT_PAYMENT_DETAILS"] = 4] = "FAILURE_REASON_INCORRECT_PAYMENT_DETAILS";
  PaymentFailureReason[PaymentFailureReason["FAILURE_REASON_INSUFFICIENT_BALANCE"] = 5] = "FAILURE_REASON_INSUFFICIENT_BALANCE";
  return PaymentFailureReason;
}({});
/**
 * Describes the enum lnrpc.PaymentFailureReason.
 */
const PaymentFailureReasonSchema = exports.PaymentFailureReasonSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 8);

/**
 * @generated from enum lnrpc.FeatureBit
 */
let FeatureBit = exports.FeatureBit = /*#__PURE__*/function (FeatureBit) {
  FeatureBit[FeatureBit["DATALOSS_PROTECT_REQ"] = 0] = "DATALOSS_PROTECT_REQ";
  FeatureBit[FeatureBit["DATALOSS_PROTECT_OPT"] = 1] = "DATALOSS_PROTECT_OPT";
  FeatureBit[FeatureBit["INITIAL_ROUING_SYNC"] = 3] = "INITIAL_ROUING_SYNC";
  FeatureBit[FeatureBit["UPFRONT_SHUTDOWN_SCRIPT_REQ"] = 4] = "UPFRONT_SHUTDOWN_SCRIPT_REQ";
  FeatureBit[FeatureBit["UPFRONT_SHUTDOWN_SCRIPT_OPT"] = 5] = "UPFRONT_SHUTDOWN_SCRIPT_OPT";
  FeatureBit[FeatureBit["GOSSIP_QUERIES_REQ"] = 6] = "GOSSIP_QUERIES_REQ";
  FeatureBit[FeatureBit["GOSSIP_QUERIES_OPT"] = 7] = "GOSSIP_QUERIES_OPT";
  FeatureBit[FeatureBit["TLV_ONION_REQ"] = 8] = "TLV_ONION_REQ";
  FeatureBit[FeatureBit["TLV_ONION_OPT"] = 9] = "TLV_ONION_OPT";
  FeatureBit[FeatureBit["EXT_GOSSIP_QUERIES_REQ"] = 10] = "EXT_GOSSIP_QUERIES_REQ";
  FeatureBit[FeatureBit["EXT_GOSSIP_QUERIES_OPT"] = 11] = "EXT_GOSSIP_QUERIES_OPT";
  FeatureBit[FeatureBit["STATIC_REMOTE_KEY_REQ"] = 12] = "STATIC_REMOTE_KEY_REQ";
  FeatureBit[FeatureBit["STATIC_REMOTE_KEY_OPT"] = 13] = "STATIC_REMOTE_KEY_OPT";
  FeatureBit[FeatureBit["PAYMENT_ADDR_REQ"] = 14] = "PAYMENT_ADDR_REQ";
  FeatureBit[FeatureBit["PAYMENT_ADDR_OPT"] = 15] = "PAYMENT_ADDR_OPT";
  FeatureBit[FeatureBit["MPP_REQ"] = 16] = "MPP_REQ";
  FeatureBit[FeatureBit["MPP_OPT"] = 17] = "MPP_OPT";
  FeatureBit[FeatureBit["WUMBO_CHANNELS_REQ"] = 18] = "WUMBO_CHANNELS_REQ";
  FeatureBit[FeatureBit["WUMBO_CHANNELS_OPT"] = 19] = "WUMBO_CHANNELS_OPT";
  FeatureBit[FeatureBit["ANCHORS_REQ"] = 20] = "ANCHORS_REQ";
  FeatureBit[FeatureBit["ANCHORS_OPT"] = 21] = "ANCHORS_OPT";
  FeatureBit[FeatureBit["ANCHORS_ZERO_FEE_HTLC_REQ"] = 22] = "ANCHORS_ZERO_FEE_HTLC_REQ";
  FeatureBit[FeatureBit["ANCHORS_ZERO_FEE_HTLC_OPT"] = 23] = "ANCHORS_ZERO_FEE_HTLC_OPT";
  FeatureBit[FeatureBit["AMP_REQ"] = 30] = "AMP_REQ";
  FeatureBit[FeatureBit["AMP_OPT"] = 31] = "AMP_OPT";
  return FeatureBit;
}({});
/**
 * Describes the enum lnrpc.FeatureBit.
 */
const FeatureBitSchema = exports.FeatureBitSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 9);

/**
 * @generated from enum lnrpc.UpdateFailure
 */
let UpdateFailure = exports.UpdateFailure = /*#__PURE__*/function (UpdateFailure) {
  UpdateFailure[UpdateFailure["UNKNOWN"] = 0] = "UNKNOWN";
  UpdateFailure[UpdateFailure["PENDING"] = 1] = "PENDING";
  UpdateFailure[UpdateFailure["NOT_FOUND"] = 2] = "NOT_FOUND";
  UpdateFailure[UpdateFailure["INTERNAL_ERR"] = 3] = "INTERNAL_ERR";
  UpdateFailure[UpdateFailure["INVALID_PARAMETER"] = 4] = "INVALID_PARAMETER";
  return UpdateFailure;
}({});
/**
 * Describes the enum lnrpc.UpdateFailure.
 */
const UpdateFailureSchema = exports.UpdateFailureSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_lightning, 10);

/**
 * Lightning is the main RPC server of the daemon.
 *
 * @generated from service lnrpc.Lightning
 */
const Lightning = exports.Lightning = /*@__PURE__*/
(0, _codegenv.serviceDesc)(file_lightning, 0);

// Merged from walletunlocker_pb.ts
const file_walletunlocker = exports.file_walletunlocker = /*@__PURE__*/
(0, _codegenv.fileDesc)("ChR3YWxsZXR1bmxvY2tlci5wcm90bxIFbG5ycGMiQQoOR2VuU2VlZFJlcXVlc3QSGQoRYWV6ZWVkX3Bhc3NwaHJhc2UYASABKAwSFAoMc2VlZF9lbnRyb3B5GAIgASgMIkgKD0dlblNlZWRSZXNwb25zZRIcChRjaXBoZXJfc2VlZF9tbmVtb25pYxgBIAMoCRIXCg9lbmNpcGhlcmVkX3NlZWQYAiABKAwi2AIKEUluaXRXYWxsZXRSZXF1ZXN0EhcKD3dhbGxldF9wYXNzd29yZBgBIAEoDBIcChRjaXBoZXJfc2VlZF9tbmVtb25pYxgCIAMoCRIZChFhZXplZWRfcGFzc3BocmFzZRgDIAEoDBIXCg9yZWNvdmVyeV93aW5kb3cYBCABKAUSMgoPY2hhbm5lbF9iYWNrdXBzGAUgASgLMhkubG5ycGMuQ2hhbkJhY2t1cFNuYXBzaG90EhYKDnN0YXRlbGVzc19pbml0GAYgASgIEhsKE2V4dGVuZGVkX21hc3Rlcl9rZXkYByABKAkSLgomZXh0ZW5kZWRfbWFzdGVyX2tleV9iaXJ0aGRheV90aW1lc3RhbXAYCCABKAQSJAoKd2F0Y2hfb25seRgJIAEoCzIQLmxucnBjLldhdGNoT25seRIZChFtYWNhcm9vbl9yb290X2tleRgKIAEoDCIsChJJbml0V2FsbGV0UmVzcG9uc2USFgoOYWRtaW5fbWFjYXJvb24YASABKAwifQoJV2F0Y2hPbmx5EiUKHW1hc3Rlcl9rZXlfYmlydGhkYXlfdGltZXN0YW1wGAEgASgEEh4KFm1hc3Rlcl9rZXlfZmluZ2VycHJpbnQYAiABKAwSKQoIYWNjb3VudHMYAyADKAsyFy5sbnJwYy5XYXRjaE9ubHlBY2NvdW50IlUKEFdhdGNoT25seUFjY291bnQSDwoHcHVycG9zZRgBIAEoDRIRCgljb2luX3R5cGUYAiABKA0SDwoHYWNjb3VudBgDIAEoDRIMCgR4cHViGAQgASgJIpMBChNVbmxvY2tXYWxsZXRSZXF1ZXN0EhcKD3dhbGxldF9wYXNzd29yZBgBIAEoDBIXCg9yZWNvdmVyeV93aW5kb3cYAiABKAUSMgoPY2hhbm5lbF9iYWNrdXBzGAMgASgLMhkubG5ycGMuQ2hhbkJhY2t1cFNuYXBzaG90EhYKDnN0YXRlbGVzc19pbml0GAQgASgIIhYKFFVubG9ja1dhbGxldFJlc3BvbnNlIn4KFUNoYW5nZVBhc3N3b3JkUmVxdWVzdBIYChBjdXJyZW50X3Bhc3N3b3JkGAEgASgMEhQKDG5ld19wYXNzd29yZBgCIAEoDBIWCg5zdGF0ZWxlc3NfaW5pdBgDIAEoCBIdChVuZXdfbWFjYXJvb25fcm9vdF9rZXkYBCABKAgiMAoWQ2hhbmdlUGFzc3dvcmRSZXNwb25zZRIWCg5hZG1pbl9tYWNhcm9vbhgBIAEoDDKlAgoOV2FsbGV0VW5sb2NrZXISOAoHR2VuU2VlZBIVLmxucnBjLkdlblNlZWRSZXF1ZXN0GhYubG5ycGMuR2VuU2VlZFJlc3BvbnNlEkEKCkluaXRXYWxsZXQSGC5sbnJwYy5Jbml0V2FsbGV0UmVxdWVzdBoZLmxucnBjLkluaXRXYWxsZXRSZXNwb25zZRJHCgxVbmxvY2tXYWxsZXQSGi5sbnJwYy5VbmxvY2tXYWxsZXRSZXF1ZXN0GhsubG5ycGMuVW5sb2NrV2FsbGV0UmVzcG9uc2USTQoOQ2hhbmdlUGFzc3dvcmQSHC5sbnJwYy5DaGFuZ2VQYXNzd29yZFJlcXVlc3QaHS5sbnJwYy5DaGFuZ2VQYXNzd29yZFJlc3BvbnNlQidaJWdpdGh1Yi5jb20vbGlnaHRuaW5nbmV0d29yay9sbmQvbG5ycGNiBnByb3RvMw", [file_lightning]);

/**
 * @generated from message lnrpc.GenSeedRequest
 */

/**
 * Describes the message lnrpc.GenSeedRequest.
 * Use `create(GenSeedRequestSchema)` to create a new message.
 */
const GenSeedRequestSchema = exports.GenSeedRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 0);

/**
 * @generated from message lnrpc.GenSeedResponse
 */

/**
 * Describes the message lnrpc.GenSeedResponse.
 * Use `create(GenSeedResponseSchema)` to create a new message.
 */
const GenSeedResponseSchema = exports.GenSeedResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 1);

/**
 * @generated from message lnrpc.InitWalletRequest
 */

/**
 * Describes the message lnrpc.InitWalletRequest.
 * Use `create(InitWalletRequestSchema)` to create a new message.
 */
const InitWalletRequestSchema = exports.InitWalletRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 2);

/**
 * @generated from message lnrpc.InitWalletResponse
 */

/**
 * Describes the message lnrpc.InitWalletResponse.
 * Use `create(InitWalletResponseSchema)` to create a new message.
 */
const InitWalletResponseSchema = exports.InitWalletResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 3);

/**
 * @generated from message lnrpc.WatchOnly
 */

/**
 * Describes the message lnrpc.WatchOnly.
 * Use `create(WatchOnlySchema)` to create a new message.
 */
const WatchOnlySchema = exports.WatchOnlySchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 4);

/**
 * @generated from message lnrpc.WatchOnlyAccount
 */

/**
 * Describes the message lnrpc.WatchOnlyAccount.
 * Use `create(WatchOnlyAccountSchema)` to create a new message.
 */
const WatchOnlyAccountSchema = exports.WatchOnlyAccountSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 5);

/**
 * @generated from message lnrpc.UnlockWalletRequest
 */

/**
 * Describes the message lnrpc.UnlockWalletRequest.
 * Use `create(UnlockWalletRequestSchema)` to create a new message.
 */
const UnlockWalletRequestSchema = exports.UnlockWalletRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 6);

/**
 * @generated from message lnrpc.UnlockWalletResponse
 */

/**
 * Describes the message lnrpc.UnlockWalletResponse.
 * Use `create(UnlockWalletResponseSchema)` to create a new message.
 */
const UnlockWalletResponseSchema = exports.UnlockWalletResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 7);

/**
 * @generated from message lnrpc.ChangePasswordRequest
 */

/**
 * Describes the message lnrpc.ChangePasswordRequest.
 * Use `create(ChangePasswordRequestSchema)` to create a new message.
 */
const ChangePasswordRequestSchema = exports.ChangePasswordRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 8);

/**
 * @generated from message lnrpc.ChangePasswordResponse
 */

/**
 * Describes the message lnrpc.ChangePasswordResponse.
 * Use `create(ChangePasswordResponseSchema)` to create a new message.
 */
const ChangePasswordResponseSchema = exports.ChangePasswordResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_walletunlocker, 9);

/**
 * WalletUnlocker is a service that is used to set up a wallet password for
 * lnd at first startup, and unlock a previously set up wallet.
 *
 * @generated from service lnrpc.WalletUnlocker
 */
const WalletUnlocker = exports.WalletUnlocker = /*@__PURE__*/
(0, _codegenv.serviceDesc)(file_walletunlocker, 0);

// Merged from stateservice_pb.ts
const file_stateservice = exports.file_stateservice = /*@__PURE__*/
(0, _codegenv.fileDesc)("ChJzdGF0ZXNlcnZpY2UucHJvdG8SBWxucnBjIhcKFVN1YnNjcmliZVN0YXRlUmVxdWVzdCI7ChZTdWJzY3JpYmVTdGF0ZVJlc3BvbnNlEiEKBXN0YXRlGAEgASgOMhIubG5ycGMuV2FsbGV0U3RhdGUiEQoPR2V0U3RhdGVSZXF1ZXN0IjUKEEdldFN0YXRlUmVzcG9uc2USIQoFc3RhdGUYASABKA4yEi5sbnJwYy5XYWxsZXRTdGF0ZSpzCgtXYWxsZXRTdGF0ZRIQCgxOT05fRVhJU1RJTkcQABIKCgZMT0NLRUQQARIMCghVTkxPQ0tFRBACEg4KClJQQ19BQ1RJVkUQAxIRCg1TRVJWRVJfQUNUSVZFEAQSFQoQV0FJVElOR19UT19TVEFSVBD/ATKVAQoFU3RhdGUSTwoOU3Vic2NyaWJlU3RhdGUSHC5sbnJwYy5TdWJzY3JpYmVTdGF0ZVJlcXVlc3QaHS5sbnJwYy5TdWJzY3JpYmVTdGF0ZVJlc3BvbnNlMAESOwoIR2V0U3RhdGUSFi5sbnJwYy5HZXRTdGF0ZVJlcXVlc3QaFy5sbnJwYy5HZXRTdGF0ZVJlc3BvbnNlQidaJWdpdGh1Yi5jb20vbGlnaHRuaW5nbmV0d29yay9sbmQvbG5ycGNiBnByb3RvMw");

/**
 * @generated from message lnrpc.SubscribeStateRequest
 */

/**
 * Describes the message lnrpc.SubscribeStateRequest.
 * Use `create(SubscribeStateRequestSchema)` to create a new message.
 */
const SubscribeStateRequestSchema = exports.SubscribeStateRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_stateservice, 0);

/**
 * @generated from message lnrpc.SubscribeStateResponse
 */

/**
 * Describes the message lnrpc.SubscribeStateResponse.
 * Use `create(SubscribeStateResponseSchema)` to create a new message.
 */
const SubscribeStateResponseSchema = exports.SubscribeStateResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_stateservice, 1);

/**
 * @generated from message lnrpc.GetStateRequest
 */

/**
 * Describes the message lnrpc.GetStateRequest.
 * Use `create(GetStateRequestSchema)` to create a new message.
 */
const GetStateRequestSchema = exports.GetStateRequestSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_stateservice, 2);

/**
 * @generated from message lnrpc.GetStateResponse
 */

/**
 * Describes the message lnrpc.GetStateResponse.
 * Use `create(GetStateResponseSchema)` to create a new message.
 */
const GetStateResponseSchema = exports.GetStateResponseSchema = /*@__PURE__*/
(0, _codegenv.messageDesc)(file_stateservice, 3);

/**
 * @generated from enum lnrpc.WalletState
 */
let WalletState = exports.WalletState = /*#__PURE__*/function (WalletState) {
  WalletState[WalletState["NON_EXISTING"] = 0] = "NON_EXISTING";
  WalletState[WalletState["LOCKED"] = 1] = "LOCKED";
  WalletState[WalletState["UNLOCKED"] = 2] = "UNLOCKED";
  WalletState[WalletState["RPC_ACTIVE"] = 3] = "RPC_ACTIVE";
  WalletState[WalletState["SERVER_ACTIVE"] = 4] = "SERVER_ACTIVE";
  WalletState[WalletState["WAITING_TO_START"] = 255] = "WAITING_TO_START";
  return WalletState;
}({});
/**
 * Describes the enum lnrpc.WalletState.
 */
const WalletStateSchema = exports.WalletStateSchema = /*@__PURE__*/
(0, _codegenv.enumDesc)(file_stateservice, 0);

/**
 * State service is a always running service that exposes the current state of
 * the wallet and RPC server.
 *
 * @generated from service lnrpc.State
 */
const State = exports.State = /*@__PURE__*/
(0, _codegenv.serviceDesc)(file_stateservice, 0);
//# sourceMappingURL=lightning_pb.js.map