"use strict";

// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file walletrpc/walletkit.proto (package walletrpc, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_lightning } from "../lightning_pb.js";
import { file_signrpc_signer } from "../signrpc/signer_pb.js";
/**
 * Describes the file walletrpc/walletkit.proto.
 */
export const file_walletrpc_walletkit = /*@__PURE__*/
fileDesc("", [file_lightning, file_signrpc_signer]);

/**
 * @generated from message walletrpc.ListUnspentRequest
 */

/**
 * Describes the message walletrpc.ListUnspentRequest.
 * Use `create(ListUnspentRequestSchema)` to create a new message.
 */
export const ListUnspentRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 0);

/**
 * @generated from message walletrpc.ListUnspentResponse
 */

/**
 * Describes the message walletrpc.ListUnspentResponse.
 * Use `create(ListUnspentResponseSchema)` to create a new message.
 */
export const ListUnspentResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 1);

/**
 * @generated from message walletrpc.LeaseOutputRequest
 */

/**
 * Describes the message walletrpc.LeaseOutputRequest.
 * Use `create(LeaseOutputRequestSchema)` to create a new message.
 */
export const LeaseOutputRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 2);

/**
 * @generated from message walletrpc.LeaseOutputResponse
 */

/**
 * Describes the message walletrpc.LeaseOutputResponse.
 * Use `create(LeaseOutputResponseSchema)` to create a new message.
 */
export const LeaseOutputResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 3);

/**
 * @generated from message walletrpc.ReleaseOutputRequest
 */

/**
 * Describes the message walletrpc.ReleaseOutputRequest.
 * Use `create(ReleaseOutputRequestSchema)` to create a new message.
 */
export const ReleaseOutputRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 4);

/**
 * @generated from message walletrpc.ReleaseOutputResponse
 */

/**
 * Describes the message walletrpc.ReleaseOutputResponse.
 * Use `create(ReleaseOutputResponseSchema)` to create a new message.
 */
export const ReleaseOutputResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 5);

/**
 * @generated from message walletrpc.KeyReq
 */

/**
 * Describes the message walletrpc.KeyReq.
 * Use `create(KeyReqSchema)` to create a new message.
 */
export const KeyReqSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 6);

/**
 * @generated from message walletrpc.AddrRequest
 */

/**
 * Describes the message walletrpc.AddrRequest.
 * Use `create(AddrRequestSchema)` to create a new message.
 */
export const AddrRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 7);

/**
 * @generated from message walletrpc.AddrResponse
 */

/**
 * Describes the message walletrpc.AddrResponse.
 * Use `create(AddrResponseSchema)` to create a new message.
 */
export const AddrResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 8);

/**
 * @generated from message walletrpc.Account
 */

/**
 * Describes the message walletrpc.Account.
 * Use `create(AccountSchema)` to create a new message.
 */
export const AccountSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 9);

/**
 * @generated from message walletrpc.AddressProperty
 */

/**
 * Describes the message walletrpc.AddressProperty.
 * Use `create(AddressPropertySchema)` to create a new message.
 */
export const AddressPropertySchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 10);

/**
 * @generated from message walletrpc.AccountWithAddresses
 */

/**
 * Describes the message walletrpc.AccountWithAddresses.
 * Use `create(AccountWithAddressesSchema)` to create a new message.
 */
export const AccountWithAddressesSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 11);

/**
 * @generated from message walletrpc.ListAccountsRequest
 */

/**
 * Describes the message walletrpc.ListAccountsRequest.
 * Use `create(ListAccountsRequestSchema)` to create a new message.
 */
export const ListAccountsRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 12);

/**
 * @generated from message walletrpc.ListAccountsResponse
 */

/**
 * Describes the message walletrpc.ListAccountsResponse.
 * Use `create(ListAccountsResponseSchema)` to create a new message.
 */
export const ListAccountsResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 13);

/**
 * @generated from message walletrpc.RequiredReserveRequest
 */

/**
 * Describes the message walletrpc.RequiredReserveRequest.
 * Use `create(RequiredReserveRequestSchema)` to create a new message.
 */
export const RequiredReserveRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 14);

/**
 * @generated from message walletrpc.RequiredReserveResponse
 */

/**
 * Describes the message walletrpc.RequiredReserveResponse.
 * Use `create(RequiredReserveResponseSchema)` to create a new message.
 */
export const RequiredReserveResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 15);

/**
 * @generated from message walletrpc.ListAddressesRequest
 */

/**
 * Describes the message walletrpc.ListAddressesRequest.
 * Use `create(ListAddressesRequestSchema)` to create a new message.
 */
export const ListAddressesRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 16);

/**
 * @generated from message walletrpc.ListAddressesResponse
 */

/**
 * Describes the message walletrpc.ListAddressesResponse.
 * Use `create(ListAddressesResponseSchema)` to create a new message.
 */
export const ListAddressesResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 17);

/**
 * @generated from message walletrpc.SignMessageWithAddrRequest
 */

/**
 * Describes the message walletrpc.SignMessageWithAddrRequest.
 * Use `create(SignMessageWithAddrRequestSchema)` to create a new message.
 */
export const SignMessageWithAddrRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 18);

/**
 * @generated from message walletrpc.SignMessageWithAddrResponse
 */

/**
 * Describes the message walletrpc.SignMessageWithAddrResponse.
 * Use `create(SignMessageWithAddrResponseSchema)` to create a new message.
 */
export const SignMessageWithAddrResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 19);

/**
 * @generated from message walletrpc.VerifyMessageWithAddrRequest
 */

/**
 * Describes the message walletrpc.VerifyMessageWithAddrRequest.
 * Use `create(VerifyMessageWithAddrRequestSchema)` to create a new message.
 */
export const VerifyMessageWithAddrRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 20);

/**
 * @generated from message walletrpc.VerifyMessageWithAddrResponse
 */

/**
 * Describes the message walletrpc.VerifyMessageWithAddrResponse.
 * Use `create(VerifyMessageWithAddrResponseSchema)` to create a new message.
 */
export const VerifyMessageWithAddrResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 21);

/**
 * @generated from message walletrpc.ImportAccountRequest
 */

/**
 * Describes the message walletrpc.ImportAccountRequest.
 * Use `create(ImportAccountRequestSchema)` to create a new message.
 */
export const ImportAccountRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 22);

/**
 * @generated from message walletrpc.ImportAccountResponse
 */

/**
 * Describes the message walletrpc.ImportAccountResponse.
 * Use `create(ImportAccountResponseSchema)` to create a new message.
 */
export const ImportAccountResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 23);

/**
 * @generated from message walletrpc.ImportPublicKeyRequest
 */

/**
 * Describes the message walletrpc.ImportPublicKeyRequest.
 * Use `create(ImportPublicKeyRequestSchema)` to create a new message.
 */
export const ImportPublicKeyRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 24);

/**
 * @generated from message walletrpc.ImportPublicKeyResponse
 */

/**
 * Describes the message walletrpc.ImportPublicKeyResponse.
 * Use `create(ImportPublicKeyResponseSchema)` to create a new message.
 */
export const ImportPublicKeyResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 25);

/**
 * @generated from message walletrpc.ImportTapscriptRequest
 */

/**
 * Describes the message walletrpc.ImportTapscriptRequest.
 * Use `create(ImportTapscriptRequestSchema)` to create a new message.
 */
export const ImportTapscriptRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 26);

/**
 * @generated from message walletrpc.TapscriptFullTree
 */

/**
 * Describes the message walletrpc.TapscriptFullTree.
 * Use `create(TapscriptFullTreeSchema)` to create a new message.
 */
export const TapscriptFullTreeSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 27);

/**
 * @generated from message walletrpc.TapLeaf
 */

/**
 * Describes the message walletrpc.TapLeaf.
 * Use `create(TapLeafSchema)` to create a new message.
 */
export const TapLeafSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 28);

/**
 * @generated from message walletrpc.TapscriptPartialReveal
 */

/**
 * Describes the message walletrpc.TapscriptPartialReveal.
 * Use `create(TapscriptPartialRevealSchema)` to create a new message.
 */
export const TapscriptPartialRevealSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 29);

/**
 * @generated from message walletrpc.ImportTapscriptResponse
 */

/**
 * Describes the message walletrpc.ImportTapscriptResponse.
 * Use `create(ImportTapscriptResponseSchema)` to create a new message.
 */
export const ImportTapscriptResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 30);

/**
 * @generated from message walletrpc.Transaction
 */

/**
 * Describes the message walletrpc.Transaction.
 * Use `create(TransactionSchema)` to create a new message.
 */
export const TransactionSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 31);

/**
 * @generated from message walletrpc.PublishResponse
 */

/**
 * Describes the message walletrpc.PublishResponse.
 * Use `create(PublishResponseSchema)` to create a new message.
 */
export const PublishResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 32);

/**
 * @generated from message walletrpc.SendOutputsRequest
 */

/**
 * Describes the message walletrpc.SendOutputsRequest.
 * Use `create(SendOutputsRequestSchema)` to create a new message.
 */
export const SendOutputsRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 33);

/**
 * @generated from message walletrpc.SendOutputsResponse
 */

/**
 * Describes the message walletrpc.SendOutputsResponse.
 * Use `create(SendOutputsResponseSchema)` to create a new message.
 */
export const SendOutputsResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 34);

/**
 * @generated from message walletrpc.EstimateFeeRequest
 */

/**
 * Describes the message walletrpc.EstimateFeeRequest.
 * Use `create(EstimateFeeRequestSchema)` to create a new message.
 */
export const EstimateFeeRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 35);

/**
 * @generated from message walletrpc.EstimateFeeResponse
 */

/**
 * Describes the message walletrpc.EstimateFeeResponse.
 * Use `create(EstimateFeeResponseSchema)` to create a new message.
 */
export const EstimateFeeResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 36);

/**
 * @generated from message walletrpc.PendingSweep
 */

/**
 * Describes the message walletrpc.PendingSweep.
 * Use `create(PendingSweepSchema)` to create a new message.
 */
export const PendingSweepSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 37);

/**
 * @generated from message walletrpc.PendingSweepsRequest
 */

/**
 * Describes the message walletrpc.PendingSweepsRequest.
 * Use `create(PendingSweepsRequestSchema)` to create a new message.
 */
export const PendingSweepsRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 38);

/**
 * @generated from message walletrpc.PendingSweepsResponse
 */

/**
 * Describes the message walletrpc.PendingSweepsResponse.
 * Use `create(PendingSweepsResponseSchema)` to create a new message.
 */
export const PendingSweepsResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 39);

/**
 * @generated from message walletrpc.BumpFeeRequest
 */

/**
 * Describes the message walletrpc.BumpFeeRequest.
 * Use `create(BumpFeeRequestSchema)` to create a new message.
 */
export const BumpFeeRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 40);

/**
 * @generated from message walletrpc.BumpFeeResponse
 */

/**
 * Describes the message walletrpc.BumpFeeResponse.
 * Use `create(BumpFeeResponseSchema)` to create a new message.
 */
export const BumpFeeResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 41);

/**
 * @generated from message walletrpc.ListSweepsRequest
 */

/**
 * Describes the message walletrpc.ListSweepsRequest.
 * Use `create(ListSweepsRequestSchema)` to create a new message.
 */
export const ListSweepsRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 42);

/**
 * @generated from message walletrpc.ListSweepsResponse
 */

/**
 * Describes the message walletrpc.ListSweepsResponse.
 * Use `create(ListSweepsResponseSchema)` to create a new message.
 */
export const ListSweepsResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 43);

/**
 * @generated from message walletrpc.ListSweepsResponse.TransactionIDs
 */

/**
 * Describes the message walletrpc.ListSweepsResponse.TransactionIDs.
 * Use `create(ListSweepsResponse_TransactionIDsSchema)` to create a new message.
 */
export const ListSweepsResponse_TransactionIDsSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 43, 0);

/**
 * @generated from message walletrpc.LabelTransactionRequest
 */

/**
 * Describes the message walletrpc.LabelTransactionRequest.
 * Use `create(LabelTransactionRequestSchema)` to create a new message.
 */
export const LabelTransactionRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 44);

/**
 * @generated from message walletrpc.LabelTransactionResponse
 */

/**
 * Describes the message walletrpc.LabelTransactionResponse.
 * Use `create(LabelTransactionResponseSchema)` to create a new message.
 */
export const LabelTransactionResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 45);

/**
 * @generated from message walletrpc.FundPsbtRequest
 */

/**
 * Describes the message walletrpc.FundPsbtRequest.
 * Use `create(FundPsbtRequestSchema)` to create a new message.
 */
export const FundPsbtRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 46);

/**
 * @generated from message walletrpc.FundPsbtResponse
 */

/**
 * Describes the message walletrpc.FundPsbtResponse.
 * Use `create(FundPsbtResponseSchema)` to create a new message.
 */
export const FundPsbtResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 47);

/**
 * @generated from message walletrpc.TxTemplate
 */

/**
 * Describes the message walletrpc.TxTemplate.
 * Use `create(TxTemplateSchema)` to create a new message.
 */
export const TxTemplateSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 48);

/**
 * @generated from message walletrpc.UtxoLease
 */

/**
 * Describes the message walletrpc.UtxoLease.
 * Use `create(UtxoLeaseSchema)` to create a new message.
 */
export const UtxoLeaseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 49);

/**
 * @generated from message walletrpc.SignPsbtRequest
 */

/**
 * Describes the message walletrpc.SignPsbtRequest.
 * Use `create(SignPsbtRequestSchema)` to create a new message.
 */
export const SignPsbtRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 50);

/**
 * @generated from message walletrpc.SignPsbtResponse
 */

/**
 * Describes the message walletrpc.SignPsbtResponse.
 * Use `create(SignPsbtResponseSchema)` to create a new message.
 */
export const SignPsbtResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 51);

/**
 * @generated from message walletrpc.FinalizePsbtRequest
 */

/**
 * Describes the message walletrpc.FinalizePsbtRequest.
 * Use `create(FinalizePsbtRequestSchema)` to create a new message.
 */
export const FinalizePsbtRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 52);

/**
 * @generated from message walletrpc.FinalizePsbtResponse
 */

/**
 * Describes the message walletrpc.FinalizePsbtResponse.
 * Use `create(FinalizePsbtResponseSchema)` to create a new message.
 */
export const FinalizePsbtResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 53);

/**
 * @generated from message walletrpc.ListLeasesRequest
 */

/**
 * Describes the message walletrpc.ListLeasesRequest.
 * Use `create(ListLeasesRequestSchema)` to create a new message.
 */
export const ListLeasesRequestSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 54);

/**
 * @generated from message walletrpc.ListLeasesResponse
 */

/**
 * Describes the message walletrpc.ListLeasesResponse.
 * Use `create(ListLeasesResponseSchema)` to create a new message.
 */
export const ListLeasesResponseSchema = /*@__PURE__*/
messageDesc(file_walletrpc_walletkit, 55);

/**
 * @generated from enum walletrpc.AddressType
 */
export let AddressType = /*#__PURE__*/function (AddressType) {
  AddressType[AddressType["UNKNOWN"] = 0] = "UNKNOWN";
  AddressType[AddressType["WITNESS_PUBKEY_HASH"] = 1] = "WITNESS_PUBKEY_HASH";
  AddressType[AddressType["NESTED_WITNESS_PUBKEY_HASH"] = 2] = "NESTED_WITNESS_PUBKEY_HASH";
  AddressType[AddressType["HYBRID_NESTED_WITNESS_PUBKEY_HASH"] = 3] = "HYBRID_NESTED_WITNESS_PUBKEY_HASH";
  AddressType[AddressType["TAPROOT_PUBKEY"] = 4] = "TAPROOT_PUBKEY";
  return AddressType;
}({});

/**
 * Describes the enum walletrpc.AddressType.
 */
export const AddressTypeSchema = /*@__PURE__*/
enumDesc(file_walletrpc_walletkit, 0);

/**
 * @generated from enum walletrpc.WitnessType
 */
export let WitnessType = /*#__PURE__*/function (WitnessType) {
  WitnessType[WitnessType["UNKNOWN_WITNESS"] = 0] = "UNKNOWN_WITNESS";
  WitnessType[WitnessType["COMMITMENT_TIME_LOCK"] = 1] = "COMMITMENT_TIME_LOCK";
  WitnessType[WitnessType["COMMITMENT_NO_DELAY"] = 2] = "COMMITMENT_NO_DELAY";
  WitnessType[WitnessType["COMMITMENT_REVOKE"] = 3] = "COMMITMENT_REVOKE";
  WitnessType[WitnessType["HTLC_OFFERED_REVOKE"] = 4] = "HTLC_OFFERED_REVOKE";
  WitnessType[WitnessType["HTLC_ACCEPTED_REVOKE"] = 5] = "HTLC_ACCEPTED_REVOKE";
  WitnessType[WitnessType["HTLC_OFFERED_TIMEOUT_SECOND_LEVEL"] = 6] = "HTLC_OFFERED_TIMEOUT_SECOND_LEVEL";
  WitnessType[WitnessType["HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL"] = 7] = "HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL";
  WitnessType[WitnessType["HTLC_OFFERED_REMOTE_TIMEOUT"] = 8] = "HTLC_OFFERED_REMOTE_TIMEOUT";
  WitnessType[WitnessType["HTLC_ACCEPTED_REMOTE_SUCCESS"] = 9] = "HTLC_ACCEPTED_REMOTE_SUCCESS";
  WitnessType[WitnessType["HTLC_SECOND_LEVEL_REVOKE"] = 10] = "HTLC_SECOND_LEVEL_REVOKE";
  WitnessType[WitnessType["WITNESS_KEY_HASH"] = 11] = "WITNESS_KEY_HASH";
  WitnessType[WitnessType["NESTED_WITNESS_KEY_HASH"] = 12] = "NESTED_WITNESS_KEY_HASH";
  WitnessType[WitnessType["COMMITMENT_ANCHOR"] = 13] = "COMMITMENT_ANCHOR";
  WitnessType[WitnessType["COMMITMENT_NO_DELAY_TWEAKLESS"] = 14] = "COMMITMENT_NO_DELAY_TWEAKLESS";
  WitnessType[WitnessType["COMMITMENT_TO_REMOTE_CONFIRMED"] = 15] = "COMMITMENT_TO_REMOTE_CONFIRMED";
  WitnessType[WitnessType["HTLC_OFFERED_TIMEOUT_SECOND_LEVEL_INPUT_CONFIRMED"] = 16] = "HTLC_OFFERED_TIMEOUT_SECOND_LEVEL_INPUT_CONFIRMED";
  WitnessType[WitnessType["HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL_INPUT_CONFIRMED"] = 17] = "HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL_INPUT_CONFIRMED";
  WitnessType[WitnessType["LEASE_COMMITMENT_TIME_LOCK"] = 18] = "LEASE_COMMITMENT_TIME_LOCK";
  WitnessType[WitnessType["LEASE_COMMITMENT_TO_REMOTE_CONFIRMED"] = 19] = "LEASE_COMMITMENT_TO_REMOTE_CONFIRMED";
  WitnessType[WitnessType["LEASE_HTLC_OFFERED_TIMEOUT_SECOND_LEVEL"] = 20] = "LEASE_HTLC_OFFERED_TIMEOUT_SECOND_LEVEL";
  WitnessType[WitnessType["LEASE_HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL"] = 21] = "LEASE_HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL";
  WitnessType[WitnessType["TAPROOT_PUB_KEY_SPEND"] = 22] = "TAPROOT_PUB_KEY_SPEND";
  return WitnessType;
}({});

/**
 * Describes the enum walletrpc.WitnessType.
 */
export const WitnessTypeSchema = /*@__PURE__*/
enumDesc(file_walletrpc_walletkit, 1);

/**
 * The possible change address types for default accounts and single imported
 * public keys. By default, P2WPKH will be used. We don't provide the
 * possibility to choose P2PKH as it is a legacy key scope, nor NP2WPKH as
 * no key scope permits to do so. For custom accounts, no change type should
 * be provided as the coin selection key scope will always be used to generate
 * the change address.
 *
 * @generated from enum walletrpc.ChangeAddressType
 */
export let ChangeAddressType = /*#__PURE__*/function (ChangeAddressType) {
  ChangeAddressType[ChangeAddressType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  ChangeAddressType[ChangeAddressType["P2TR"] = 1] = "P2TR";
  return ChangeAddressType;
}({});

/**
 * Describes the enum walletrpc.ChangeAddressType.
 */
export const ChangeAddressTypeSchema = /*@__PURE__*/
enumDesc(file_walletrpc_walletkit, 2);

/**
 * WalletKit is a service that gives access to the core functionalities of the
 * daemon's wallet.
 *
 * @generated from service walletrpc.WalletKit
 */
export const WalletKit = /*@__PURE__*/
serviceDesc(file_walletrpc_walletkit, 0);
//# sourceMappingURL=walletkit_pb.js.map