// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file stateservice.proto (package lnrpc, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file stateservice.proto.
 */
export const file_stateservice: GenFile = /*@__PURE__*/
  fileDesc("ChJzdGF0ZXNlcnZpY2UucHJvdG8SBWxucnBjIhcKFVN1YnNjcmliZVN0YXRlUmVxdWVzdCI7ChZTdWJzY3JpYmVTdGF0ZVJlc3BvbnNlEiEKBXN0YXRlGAEgASgOMhIubG5ycGMuV2FsbGV0U3RhdGUiEQoPR2V0U3RhdGVSZXF1ZXN0IjUKEEdldFN0YXRlUmVzcG9uc2USIQoFc3RhdGUYASABKA4yEi5sbnJwYy5XYWxsZXRTdGF0ZSpzCgtXYWxsZXRTdGF0ZRIQCgxOT05fRVhJU1RJTkcQABIKCgZMT0NLRUQQARIMCghVTkxPQ0tFRBACEg4KClJQQ19BQ1RJVkUQAxIRCg1TRVJWRVJfQUNUSVZFEAQSFQoQV0FJVElOR19UT19TVEFSVBD/ATKVAQoFU3RhdGUSTwoOU3Vic2NyaWJlU3RhdGUSHC5sbnJwYy5TdWJzY3JpYmVTdGF0ZVJlcXVlc3QaHS5sbnJwYy5TdWJzY3JpYmVTdGF0ZVJlc3BvbnNlMAESOwoIR2V0U3RhdGUSFi5sbnJwYy5HZXRTdGF0ZVJlcXVlc3QaFy5sbnJwYy5HZXRTdGF0ZVJlc3BvbnNlQidaJWdpdGh1Yi5jb20vbGlnaHRuaW5nbmV0d29yay9sbmQvbG5ycGNiBnByb3RvMw");

/**
 * @generated from message lnrpc.SubscribeStateRequest
 */
export type SubscribeStateRequest = Message<"lnrpc.SubscribeStateRequest"> & {
};

/**
 * Describes the message lnrpc.SubscribeStateRequest.
 * Use `create(SubscribeStateRequestSchema)` to create a new message.
 */
export const SubscribeStateRequestSchema: GenMessage<SubscribeStateRequest> = /*@__PURE__*/
  messageDesc(file_stateservice, 0);

/**
 * @generated from message lnrpc.SubscribeStateResponse
 */
export type SubscribeStateResponse = Message<"lnrpc.SubscribeStateResponse"> & {
  /**
   * @generated from field: lnrpc.WalletState state = 1;
   */
  state: WalletState;
};

/**
 * Describes the message lnrpc.SubscribeStateResponse.
 * Use `create(SubscribeStateResponseSchema)` to create a new message.
 */
export const SubscribeStateResponseSchema: GenMessage<SubscribeStateResponse> = /*@__PURE__*/
  messageDesc(file_stateservice, 1);

/**
 * @generated from message lnrpc.GetStateRequest
 */
export type GetStateRequest = Message<"lnrpc.GetStateRequest"> & {
};

/**
 * Describes the message lnrpc.GetStateRequest.
 * Use `create(GetStateRequestSchema)` to create a new message.
 */
export const GetStateRequestSchema: GenMessage<GetStateRequest> = /*@__PURE__*/
  messageDesc(file_stateservice, 2);

/**
 * @generated from message lnrpc.GetStateResponse
 */
export type GetStateResponse = Message<"lnrpc.GetStateResponse"> & {
  /**
   * @generated from field: lnrpc.WalletState state = 1;
   */
  state: WalletState;
};

/**
 * Describes the message lnrpc.GetStateResponse.
 * Use `create(GetStateResponseSchema)` to create a new message.
 */
export const GetStateResponseSchema: GenMessage<GetStateResponse> = /*@__PURE__*/
  messageDesc(file_stateservice, 3);

/**
 * @generated from enum lnrpc.WalletState
 */
export enum WalletState {
  /**
   * NON_EXISTING means that the wallet has not yet been initialized.
   *
   * @generated from enum value: NON_EXISTING = 0;
   */
  NON_EXISTING = 0,

  /**
   * LOCKED means that the wallet is locked and requires a password to unlock.
   *
   * @generated from enum value: LOCKED = 1;
   */
  LOCKED = 1,

  /**
   * UNLOCKED means that the wallet was unlocked successfully, but RPC server
   * isn't ready.
   *
   * @generated from enum value: UNLOCKED = 2;
   */
  UNLOCKED = 2,

  /**
   * RPC_ACTIVE means that the lnd server is active but not fully ready for
   * calls.
   *
   * @generated from enum value: RPC_ACTIVE = 3;
   */
  RPC_ACTIVE = 3,

  /**
   * SERVER_ACTIVE means that the lnd server is ready to accept calls.
   *
   * @generated from enum value: SERVER_ACTIVE = 4;
   */
  SERVER_ACTIVE = 4,

  /**
   * WAITING_TO_START means that node is waiting to become the leader in a
   * cluster and is not started yet.
   *
   * @generated from enum value: WAITING_TO_START = 255;
   */
  WAITING_TO_START = 255,
}

/**
 * Describes the enum lnrpc.WalletState.
 */
export const WalletStateSchema: GenEnum<WalletState> = /*@__PURE__*/
  enumDesc(file_stateservice, 0);

/**
 * State service is a always running service that exposes the current state of
 * the wallet and RPC server.
 *
 * @generated from service lnrpc.State
 */
export const State: GenService<{
  /**
   * SubscribeState subscribes to the state of the wallet. The current wallet
   * state will always be delivered immediately.
   *
   * @generated from rpc lnrpc.State.SubscribeState
   */
  subscribeState: {
    methodKind: "server_streaming";
    input: typeof SubscribeStateRequestSchema;
    output: typeof SubscribeStateResponseSchema;
  },
  /**
   * GetState returns the current wallet state without streaming further
   * changes.
   *
   * @generated from rpc lnrpc.State.GetState
   */
  getState: {
    methodKind: "unary";
    input: typeof GetStateRequestSchema;
    output: typeof GetStateResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_stateservice, 0);

