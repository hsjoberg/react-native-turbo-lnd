// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file wtclientrpc/wtclient.proto (package wtclientrpc, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file wtclientrpc/wtclient.proto.
 */
export const file_wtclientrpc_wtclient: GenFile = /*@__PURE__*/
  fileDesc("Chp3dGNsaWVudHJwYy93dGNsaWVudC5wcm90bxILd3RjbGllbnRycGMiMgoPQWRkVG93ZXJSZXF1ZXN0Eg4KBnB1YmtleRgBIAEoDBIPCgdhZGRyZXNzGAIgASgJIhIKEEFkZFRvd2VyUmVzcG9uc2UiNQoSUmVtb3ZlVG93ZXJSZXF1ZXN0Eg4KBnB1YmtleRgBIAEoDBIPCgdhZGRyZXNzGAIgASgJIhUKE1JlbW92ZVRvd2VyUmVzcG9uc2UiYwoTR2V0VG93ZXJJbmZvUmVxdWVzdBIOCgZwdWJrZXkYASABKAwSGAoQaW5jbHVkZV9zZXNzaW9ucxgCIAEoCBIiChpleGNsdWRlX2V4aGF1c3RlZF9zZXNzaW9ucxgDIAEoCCKSAQoMVG93ZXJTZXNzaW9uEhMKC251bV9iYWNrdXBzGAEgASgNEhsKE251bV9wZW5kaW5nX2JhY2t1cHMYAiABKA0SEwoLbWF4X2JhY2t1cHMYAyABKA0SHgoSc3dlZXBfc2F0X3Blcl9ieXRlGAQgASgNQgIYARIbChNzd2VlcF9zYXRfcGVyX3ZieXRlGAUgASgNItABCgVUb3dlchIOCgZwdWJrZXkYASABKAwSEQoJYWRkcmVzc2VzGAIgAygJEiQKGGFjdGl2ZV9zZXNzaW9uX2NhbmRpZGF0ZRgDIAEoCEICGAESGAoMbnVtX3Nlc3Npb25zGAQgASgNQgIYARIvCghzZXNzaW9ucxgFIAMoCzIZLnd0Y2xpZW50cnBjLlRvd2VyU2Vzc2lvbkICGAESMwoMc2Vzc2lvbl9pbmZvGAYgAygLMh0ud3RjbGllbnRycGMuVG93ZXJTZXNzaW9uSW5mbyKlAQoQVG93ZXJTZXNzaW9uSW5mbxIgChhhY3RpdmVfc2Vzc2lvbl9jYW5kaWRhdGUYASABKAgSFAoMbnVtX3Nlc3Npb25zGAIgASgNEisKCHNlc3Npb25zGAMgAygLMhkud3RjbGllbnRycGMuVG93ZXJTZXNzaW9uEiwKC3BvbGljeV90eXBlGAQgASgOMhcud3RjbGllbnRycGMuUG9saWN5VHlwZSJRChFMaXN0VG93ZXJzUmVxdWVzdBIYChBpbmNsdWRlX3Nlc3Npb25zGAEgASgIEiIKGmV4Y2x1ZGVfZXhoYXVzdGVkX3Nlc3Npb25zGAIgASgIIjgKEkxpc3RUb3dlcnNSZXNwb25zZRIiCgZ0b3dlcnMYASADKAsyEi53dGNsaWVudHJwYy5Ub3dlciIOCgxTdGF0c1JlcXVlc3QinAEKDVN0YXRzUmVzcG9uc2USEwoLbnVtX2JhY2t1cHMYASABKA0SGwoTbnVtX3BlbmRpbmdfYmFja3VwcxgCIAEoDRIaChJudW1fZmFpbGVkX2JhY2t1cHMYAyABKA0SHQoVbnVtX3Nlc3Npb25zX2FjcXVpcmVkGAQgASgNEh4KFm51bV9zZXNzaW9uc19leGhhdXN0ZWQYBSABKA0iPQoNUG9saWN5UmVxdWVzdBIsCgtwb2xpY3lfdHlwZRgBIAEoDjIXLnd0Y2xpZW50cnBjLlBvbGljeVR5cGUiYgoOUG9saWN5UmVzcG9uc2USEwoLbWF4X3VwZGF0ZXMYASABKA0SHgoSc3dlZXBfc2F0X3Blcl9ieXRlGAIgASgNQgIYARIbChNzd2VlcF9zYXRfcGVyX3ZieXRlGAMgASgNKiQKClBvbGljeVR5cGUSCgoGTEVHQUNZEAASCgoGQU5DSE9SEAEyxQMKEFdhdGNodG93ZXJDbGllbnQSRwoIQWRkVG93ZXISHC53dGNsaWVudHJwYy5BZGRUb3dlclJlcXVlc3QaHS53dGNsaWVudHJwYy5BZGRUb3dlclJlc3BvbnNlElAKC1JlbW92ZVRvd2VyEh8ud3RjbGllbnRycGMuUmVtb3ZlVG93ZXJSZXF1ZXN0GiAud3RjbGllbnRycGMuUmVtb3ZlVG93ZXJSZXNwb25zZRJNCgpMaXN0VG93ZXJzEh4ud3RjbGllbnRycGMuTGlzdFRvd2Vyc1JlcXVlc3QaHy53dGNsaWVudHJwYy5MaXN0VG93ZXJzUmVzcG9uc2USRAoMR2V0VG93ZXJJbmZvEiAud3RjbGllbnRycGMuR2V0VG93ZXJJbmZvUmVxdWVzdBoSLnd0Y2xpZW50cnBjLlRvd2VyEj4KBVN0YXRzEhkud3RjbGllbnRycGMuU3RhdHNSZXF1ZXN0Ghoud3RjbGllbnRycGMuU3RhdHNSZXNwb25zZRJBCgZQb2xpY3kSGi53dGNsaWVudHJwYy5Qb2xpY3lSZXF1ZXN0Ghsud3RjbGllbnRycGMuUG9saWN5UmVzcG9uc2VCM1oxZ2l0aHViLmNvbS9saWdodG5pbmduZXR3b3JrL2xuZC9sbnJwYy93dGNsaWVudHJwY2IGcHJvdG8z");

/**
 * @generated from message wtclientrpc.AddTowerRequest
 */
export type AddTowerRequest = Message<"wtclientrpc.AddTowerRequest"> & {
  /**
   * The identifying public key of the watchtower to add.
   *
   * @generated from field: bytes pubkey = 1;
   */
  pubkey: Uint8Array;

  /**
   * A network address the watchtower is reachable over.
   *
   * @generated from field: string address = 2;
   */
  address: string;
};

/**
 * Describes the message wtclientrpc.AddTowerRequest.
 * Use `create(AddTowerRequestSchema)` to create a new message.
 */
export const AddTowerRequestSchema: GenMessage<AddTowerRequest> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 0);

/**
 * @generated from message wtclientrpc.AddTowerResponse
 */
export type AddTowerResponse = Message<"wtclientrpc.AddTowerResponse"> & {
};

/**
 * Describes the message wtclientrpc.AddTowerResponse.
 * Use `create(AddTowerResponseSchema)` to create a new message.
 */
export const AddTowerResponseSchema: GenMessage<AddTowerResponse> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 1);

/**
 * @generated from message wtclientrpc.RemoveTowerRequest
 */
export type RemoveTowerRequest = Message<"wtclientrpc.RemoveTowerRequest"> & {
  /**
   * The identifying public key of the watchtower to remove.
   *
   * @generated from field: bytes pubkey = 1;
   */
  pubkey: Uint8Array;

  /**
   * 
   * If set, then the record for this address will be removed, indicating that is
   * is stale. Otherwise, the watchtower will no longer be used for future
   * session negotiations and backups.
   *
   * @generated from field: string address = 2;
   */
  address: string;
};

/**
 * Describes the message wtclientrpc.RemoveTowerRequest.
 * Use `create(RemoveTowerRequestSchema)` to create a new message.
 */
export const RemoveTowerRequestSchema: GenMessage<RemoveTowerRequest> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 2);

/**
 * @generated from message wtclientrpc.RemoveTowerResponse
 */
export type RemoveTowerResponse = Message<"wtclientrpc.RemoveTowerResponse"> & {
};

/**
 * Describes the message wtclientrpc.RemoveTowerResponse.
 * Use `create(RemoveTowerResponseSchema)` to create a new message.
 */
export const RemoveTowerResponseSchema: GenMessage<RemoveTowerResponse> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 3);

/**
 * @generated from message wtclientrpc.GetTowerInfoRequest
 */
export type GetTowerInfoRequest = Message<"wtclientrpc.GetTowerInfoRequest"> & {
  /**
   * The identifying public key of the watchtower to retrieve information for.
   *
   * @generated from field: bytes pubkey = 1;
   */
  pubkey: Uint8Array;

  /**
   * Whether we should include sessions with the watchtower in the response.
   *
   * @generated from field: bool include_sessions = 2;
   */
  includeSessions: boolean;

  /**
   * Whether to exclude exhausted sessions in the response info. This option
   * is only meaningful if include_sessions is true.
   *
   * @generated from field: bool exclude_exhausted_sessions = 3;
   */
  excludeExhaustedSessions: boolean;
};

/**
 * Describes the message wtclientrpc.GetTowerInfoRequest.
 * Use `create(GetTowerInfoRequestSchema)` to create a new message.
 */
export const GetTowerInfoRequestSchema: GenMessage<GetTowerInfoRequest> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 4);

/**
 * @generated from message wtclientrpc.TowerSession
 */
export type TowerSession = Message<"wtclientrpc.TowerSession"> & {
  /**
   * 
   * The total number of successful backups that have been made to the
   * watchtower session.
   *
   * @generated from field: uint32 num_backups = 1;
   */
  numBackups: number;

  /**
   * 
   * The total number of backups in the session that are currently pending to be
   * acknowledged by the watchtower.
   *
   * @generated from field: uint32 num_pending_backups = 2;
   */
  numPendingBackups: number;

  /**
   * The maximum number of backups allowed by the watchtower session.
   *
   * @generated from field: uint32 max_backups = 3;
   */
  maxBackups: number;

  /**
   * 
   * Deprecated, use sweep_sat_per_vbyte.
   * The fee rate, in satoshis per vbyte, that will be used by the watchtower for
   * the justice transaction in the event of a channel breach.
   *
   * @generated from field: uint32 sweep_sat_per_byte = 4 [deprecated = true];
   * @deprecated
   */
  sweepSatPerByte: number;

  /**
   * 
   * The fee rate, in satoshis per vbyte, that will be used by the watchtower for
   * the justice transaction in the event of a channel breach.
   *
   * @generated from field: uint32 sweep_sat_per_vbyte = 5;
   */
  sweepSatPerVbyte: number;
};

/**
 * Describes the message wtclientrpc.TowerSession.
 * Use `create(TowerSessionSchema)` to create a new message.
 */
export const TowerSessionSchema: GenMessage<TowerSession> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 5);

/**
 * @generated from message wtclientrpc.Tower
 */
export type Tower = Message<"wtclientrpc.Tower"> & {
  /**
   * The identifying public key of the watchtower.
   *
   * @generated from field: bytes pubkey = 1;
   */
  pubkey: Uint8Array;

  /**
   * The list of addresses the watchtower is reachable over.
   *
   * @generated from field: repeated string addresses = 2;
   */
  addresses: string[];

  /**
   * Deprecated, use the active_session_candidate field under the
   * correct identifier in the client_type map.
   * Whether the watchtower is currently a candidate for new sessions.
   *
   * @generated from field: bool active_session_candidate = 3 [deprecated = true];
   * @deprecated
   */
  activeSessionCandidate: boolean;

  /**
   * Deprecated, use the num_sessions field under the correct identifier
   * in the client_type map.
   * The number of sessions that have been negotiated with the watchtower.
   *
   * @generated from field: uint32 num_sessions = 4 [deprecated = true];
   * @deprecated
   */
  numSessions: number;

  /**
   * Deprecated, use the sessions field under the correct identifier in the
   * client_type map.
   * The list of sessions that have been negotiated with the watchtower.
   *
   * @generated from field: repeated wtclientrpc.TowerSession sessions = 5 [deprecated = true];
   * @deprecated
   */
  sessions: TowerSession[];

  /**
   * A list sessions held with the tower.
   *
   * @generated from field: repeated wtclientrpc.TowerSessionInfo session_info = 6;
   */
  sessionInfo: TowerSessionInfo[];
};

/**
 * Describes the message wtclientrpc.Tower.
 * Use `create(TowerSchema)` to create a new message.
 */
export const TowerSchema: GenMessage<Tower> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 6);

/**
 * @generated from message wtclientrpc.TowerSessionInfo
 */
export type TowerSessionInfo = Message<"wtclientrpc.TowerSessionInfo"> & {
  /**
   * Whether the watchtower is currently a candidate for new sessions.
   *
   * @generated from field: bool active_session_candidate = 1;
   */
  activeSessionCandidate: boolean;

  /**
   * The number of sessions that have been negotiated with the watchtower.
   *
   * @generated from field: uint32 num_sessions = 2;
   */
  numSessions: number;

  /**
   * The list of sessions that have been negotiated with the watchtower.
   *
   * @generated from field: repeated wtclientrpc.TowerSession sessions = 3;
   */
  sessions: TowerSession[];

  /**
   * The session's policy type.
   *
   * @generated from field: wtclientrpc.PolicyType policy_type = 4;
   */
  policyType: PolicyType;
};

/**
 * Describes the message wtclientrpc.TowerSessionInfo.
 * Use `create(TowerSessionInfoSchema)` to create a new message.
 */
export const TowerSessionInfoSchema: GenMessage<TowerSessionInfo> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 7);

/**
 * @generated from message wtclientrpc.ListTowersRequest
 */
export type ListTowersRequest = Message<"wtclientrpc.ListTowersRequest"> & {
  /**
   * Whether we should include sessions with the watchtower in the response.
   *
   * @generated from field: bool include_sessions = 1;
   */
  includeSessions: boolean;

  /**
   * Whether to exclude exhausted sessions in the response info. This option
   * is only meaningful if include_sessions is true.
   *
   * @generated from field: bool exclude_exhausted_sessions = 2;
   */
  excludeExhaustedSessions: boolean;
};

/**
 * Describes the message wtclientrpc.ListTowersRequest.
 * Use `create(ListTowersRequestSchema)` to create a new message.
 */
export const ListTowersRequestSchema: GenMessage<ListTowersRequest> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 8);

/**
 * @generated from message wtclientrpc.ListTowersResponse
 */
export type ListTowersResponse = Message<"wtclientrpc.ListTowersResponse"> & {
  /**
   * The list of watchtowers available for new backups.
   *
   * @generated from field: repeated wtclientrpc.Tower towers = 1;
   */
  towers: Tower[];
};

/**
 * Describes the message wtclientrpc.ListTowersResponse.
 * Use `create(ListTowersResponseSchema)` to create a new message.
 */
export const ListTowersResponseSchema: GenMessage<ListTowersResponse> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 9);

/**
 * @generated from message wtclientrpc.StatsRequest
 */
export type StatsRequest = Message<"wtclientrpc.StatsRequest"> & {
};

/**
 * Describes the message wtclientrpc.StatsRequest.
 * Use `create(StatsRequestSchema)` to create a new message.
 */
export const StatsRequestSchema: GenMessage<StatsRequest> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 10);

/**
 * @generated from message wtclientrpc.StatsResponse
 */
export type StatsResponse = Message<"wtclientrpc.StatsResponse"> & {
  /**
   * 
   * The total number of backups made to all active and exhausted watchtower
   * sessions.
   *
   * @generated from field: uint32 num_backups = 1;
   */
  numBackups: number;

  /**
   * 
   * The total number of backups that are pending to be acknowledged by all
   * active and exhausted watchtower sessions.
   *
   * @generated from field: uint32 num_pending_backups = 2;
   */
  numPendingBackups: number;

  /**
   * 
   * The total number of backups that all active and exhausted watchtower
   * sessions have failed to acknowledge.
   *
   * @generated from field: uint32 num_failed_backups = 3;
   */
  numFailedBackups: number;

  /**
   * The total number of new sessions made to watchtowers.
   *
   * @generated from field: uint32 num_sessions_acquired = 4;
   */
  numSessionsAcquired: number;

  /**
   * The total number of watchtower sessions that have been exhausted.
   *
   * @generated from field: uint32 num_sessions_exhausted = 5;
   */
  numSessionsExhausted: number;
};

/**
 * Describes the message wtclientrpc.StatsResponse.
 * Use `create(StatsResponseSchema)` to create a new message.
 */
export const StatsResponseSchema: GenMessage<StatsResponse> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 11);

/**
 * @generated from message wtclientrpc.PolicyRequest
 */
export type PolicyRequest = Message<"wtclientrpc.PolicyRequest"> & {
  /**
   * 
   * The client type from which to retrieve the active offering policy.
   *
   * @generated from field: wtclientrpc.PolicyType policy_type = 1;
   */
  policyType: PolicyType;
};

/**
 * Describes the message wtclientrpc.PolicyRequest.
 * Use `create(PolicyRequestSchema)` to create a new message.
 */
export const PolicyRequestSchema: GenMessage<PolicyRequest> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 12);

/**
 * @generated from message wtclientrpc.PolicyResponse
 */
export type PolicyResponse = Message<"wtclientrpc.PolicyResponse"> & {
  /**
   * 
   * The maximum number of updates each session we negotiate with watchtowers
   * should allow.
   *
   * @generated from field: uint32 max_updates = 1;
   */
  maxUpdates: number;

  /**
   * 
   * Deprecated, use sweep_sat_per_vbyte.
   * The fee rate, in satoshis per vbyte, that will be used by watchtowers for
   * justice transactions in response to channel breaches.
   *
   * @generated from field: uint32 sweep_sat_per_byte = 2 [deprecated = true];
   * @deprecated
   */
  sweepSatPerByte: number;

  /**
   * 
   * The fee rate, in satoshis per vbyte, that will be used by watchtowers for
   * justice transactions in response to channel breaches.
   *
   * @generated from field: uint32 sweep_sat_per_vbyte = 3;
   */
  sweepSatPerVbyte: number;
};

/**
 * Describes the message wtclientrpc.PolicyResponse.
 * Use `create(PolicyResponseSchema)` to create a new message.
 */
export const PolicyResponseSchema: GenMessage<PolicyResponse> = /*@__PURE__*/
  messageDesc(file_wtclientrpc_wtclient, 13);

/**
 * @generated from enum wtclientrpc.PolicyType
 */
export enum PolicyType {
  /**
   * Selects the policy from the legacy tower client.
   *
   * @generated from enum value: LEGACY = 0;
   */
  LEGACY = 0,

  /**
   * Selects the policy from the anchor tower client.
   *
   * @generated from enum value: ANCHOR = 1;
   */
  ANCHOR = 1,
}

/**
 * Describes the enum wtclientrpc.PolicyType.
 */
export const PolicyTypeSchema: GenEnum<PolicyType> = /*@__PURE__*/
  enumDesc(file_wtclientrpc_wtclient, 0);

/**
 * WatchtowerClient is a service that grants access to the watchtower client
 * functionality of the daemon.
 *
 * @generated from service wtclientrpc.WatchtowerClient
 */
export const WatchtowerClient: GenService<{
  /**
   * 
   * AddTower adds a new watchtower reachable at the given address and
   * considers it for new sessions. If the watchtower already exists, then
   * any new addresses included will be considered when dialing it for
   * session negotiations and backups.
   *
   * @generated from rpc wtclientrpc.WatchtowerClient.AddTower
   */
  addTower: {
    methodKind: "unary";
    input: typeof AddTowerRequestSchema;
    output: typeof AddTowerResponseSchema;
  },
  /**
   * 
   * RemoveTower removes a watchtower from being considered for future session
   * negotiations and from being used for any subsequent backups until it's added
   * again. If an address is provided, then this RPC only serves as a way of
   * removing the address from the watchtower instead.
   *
   * @generated from rpc wtclientrpc.WatchtowerClient.RemoveTower
   */
  removeTower: {
    methodKind: "unary";
    input: typeof RemoveTowerRequestSchema;
    output: typeof RemoveTowerResponseSchema;
  },
  /**
   * ListTowers returns the list of watchtowers registered with the client.
   *
   * @generated from rpc wtclientrpc.WatchtowerClient.ListTowers
   */
  listTowers: {
    methodKind: "unary";
    input: typeof ListTowersRequestSchema;
    output: typeof ListTowersResponseSchema;
  },
  /**
   * GetTowerInfo retrieves information for a registered watchtower.
   *
   * @generated from rpc wtclientrpc.WatchtowerClient.GetTowerInfo
   */
  getTowerInfo: {
    methodKind: "unary";
    input: typeof GetTowerInfoRequestSchema;
    output: typeof TowerSchema;
  },
  /**
   * Stats returns the in-memory statistics of the client since startup.
   *
   * @generated from rpc wtclientrpc.WatchtowerClient.Stats
   */
  stats: {
    methodKind: "unary";
    input: typeof StatsRequestSchema;
    output: typeof StatsResponseSchema;
  },
  /**
   * Policy returns the active watchtower client policy configuration.
   *
   * @generated from rpc wtclientrpc.WatchtowerClient.Policy
   */
  policy: {
    methodKind: "unary";
    input: typeof PolicyRequestSchema;
    output: typeof PolicyResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_wtclientrpc_wtclient, 0);

