// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file autopilotrpc/autopilot.proto (package autopilotrpc, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file autopilotrpc/autopilot.proto.
 */
export const file_autopilotrpc_autopilot: GenFile = /*@__PURE__*/
  fileDesc("ChxhdXRvcGlsb3RycGMvYXV0b3BpbG90LnByb3RvEgxhdXRvcGlsb3RycGMiDwoNU3RhdHVzUmVxdWVzdCIgCg5TdGF0dXNSZXNwb25zZRIOCgZhY3RpdmUYASABKAgiJQoTTW9kaWZ5U3RhdHVzUmVxdWVzdBIOCgZlbmFibGUYASABKAgiFgoUTW9kaWZ5U3RhdHVzUmVzcG9uc2UiQQoSUXVlcnlTY29yZXNSZXF1ZXN0Eg8KB3B1YmtleXMYASADKAkSGgoSaWdub3JlX2xvY2FsX3N0YXRlGAIgASgIIv4BChNRdWVyeVNjb3Jlc1Jlc3BvbnNlEkIKB3Jlc3VsdHMYASADKAsyMS5hdXRvcGlsb3RycGMuUXVlcnlTY29yZXNSZXNwb25zZS5IZXVyaXN0aWNSZXN1bHQaogEKD0hldXJpc3RpY1Jlc3VsdBIRCgloZXVyaXN0aWMYASABKAkSTQoGc2NvcmVzGAIgAygLMj0uYXV0b3BpbG90cnBjLlF1ZXJ5U2NvcmVzUmVzcG9uc2UuSGV1cmlzdGljUmVzdWx0LlNjb3Jlc0VudHJ5Gi0KC1Njb3Jlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAToCOAEikAEKEFNldFNjb3Jlc1JlcXVlc3QSEQoJaGV1cmlzdGljGAEgASgJEjoKBnNjb3JlcxgCIAMoCzIqLmF1dG9waWxvdHJwYy5TZXRTY29yZXNSZXF1ZXN0LlNjb3Jlc0VudHJ5Gi0KC1Njb3Jlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAToCOAEiEwoRU2V0U2NvcmVzUmVzcG9uc2UyyQIKCUF1dG9waWxvdBJDCgZTdGF0dXMSGy5hdXRvcGlsb3RycGMuU3RhdHVzUmVxdWVzdBocLmF1dG9waWxvdHJwYy5TdGF0dXNSZXNwb25zZRJVCgxNb2RpZnlTdGF0dXMSIS5hdXRvcGlsb3RycGMuTW9kaWZ5U3RhdHVzUmVxdWVzdBoiLmF1dG9waWxvdHJwYy5Nb2RpZnlTdGF0dXNSZXNwb25zZRJSCgtRdWVyeVNjb3JlcxIgLmF1dG9waWxvdHJwYy5RdWVyeVNjb3Jlc1JlcXVlc3QaIS5hdXRvcGlsb3RycGMuUXVlcnlTY29yZXNSZXNwb25zZRJMCglTZXRTY29yZXMSHi5hdXRvcGlsb3RycGMuU2V0U2NvcmVzUmVxdWVzdBofLmF1dG9waWxvdHJwYy5TZXRTY29yZXNSZXNwb25zZUI0WjJnaXRodWIuY29tL2xpZ2h0bmluZ25ldHdvcmsvbG5kL2xucnBjL2F1dG9waWxvdHJwY2IGcHJvdG8z");

/**
 * @generated from message autopilotrpc.StatusRequest
 */
export type StatusRequest = Message<"autopilotrpc.StatusRequest"> & {
};

/**
 * Describes the message autopilotrpc.StatusRequest.
 * Use `create(StatusRequestSchema)` to create a new message.
 */
export const StatusRequestSchema: GenMessage<StatusRequest> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 0);

/**
 * @generated from message autopilotrpc.StatusResponse
 */
export type StatusResponse = Message<"autopilotrpc.StatusResponse"> & {
  /**
   * Indicates whether the autopilot is active or not.
   *
   * @generated from field: bool active = 1;
   */
  active: boolean;
};

/**
 * Describes the message autopilotrpc.StatusResponse.
 * Use `create(StatusResponseSchema)` to create a new message.
 */
export const StatusResponseSchema: GenMessage<StatusResponse> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 1);

/**
 * @generated from message autopilotrpc.ModifyStatusRequest
 */
export type ModifyStatusRequest = Message<"autopilotrpc.ModifyStatusRequest"> & {
  /**
   * Whether the autopilot agent should be enabled or not.
   *
   * @generated from field: bool enable = 1;
   */
  enable: boolean;
};

/**
 * Describes the message autopilotrpc.ModifyStatusRequest.
 * Use `create(ModifyStatusRequestSchema)` to create a new message.
 */
export const ModifyStatusRequestSchema: GenMessage<ModifyStatusRequest> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 2);

/**
 * @generated from message autopilotrpc.ModifyStatusResponse
 */
export type ModifyStatusResponse = Message<"autopilotrpc.ModifyStatusResponse"> & {
};

/**
 * Describes the message autopilotrpc.ModifyStatusResponse.
 * Use `create(ModifyStatusResponseSchema)` to create a new message.
 */
export const ModifyStatusResponseSchema: GenMessage<ModifyStatusResponse> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 3);

/**
 * @generated from message autopilotrpc.QueryScoresRequest
 */
export type QueryScoresRequest = Message<"autopilotrpc.QueryScoresRequest"> & {
  /**
   * @generated from field: repeated string pubkeys = 1;
   */
  pubkeys: string[];

  /**
   * If set, we will ignore the local channel state when calculating scores.
   *
   * @generated from field: bool ignore_local_state = 2;
   */
  ignoreLocalState: boolean;
};

/**
 * Describes the message autopilotrpc.QueryScoresRequest.
 * Use `create(QueryScoresRequestSchema)` to create a new message.
 */
export const QueryScoresRequestSchema: GenMessage<QueryScoresRequest> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 4);

/**
 * @generated from message autopilotrpc.QueryScoresResponse
 */
export type QueryScoresResponse = Message<"autopilotrpc.QueryScoresResponse"> & {
  /**
   * @generated from field: repeated autopilotrpc.QueryScoresResponse.HeuristicResult results = 1;
   */
  results: QueryScoresResponse_HeuristicResult[];
};

/**
 * Describes the message autopilotrpc.QueryScoresResponse.
 * Use `create(QueryScoresResponseSchema)` to create a new message.
 */
export const QueryScoresResponseSchema: GenMessage<QueryScoresResponse> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 5);

/**
 * @generated from message autopilotrpc.QueryScoresResponse.HeuristicResult
 */
export type QueryScoresResponse_HeuristicResult = Message<"autopilotrpc.QueryScoresResponse.HeuristicResult"> & {
  /**
   * @generated from field: string heuristic = 1;
   */
  heuristic: string;

  /**
   * @generated from field: map<string, double> scores = 2;
   */
  scores: { [key: string]: number };
};

/**
 * Describes the message autopilotrpc.QueryScoresResponse.HeuristicResult.
 * Use `create(QueryScoresResponse_HeuristicResultSchema)` to create a new message.
 */
export const QueryScoresResponse_HeuristicResultSchema: GenMessage<QueryScoresResponse_HeuristicResult> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 5, 0);

/**
 * @generated from message autopilotrpc.SetScoresRequest
 */
export type SetScoresRequest = Message<"autopilotrpc.SetScoresRequest"> & {
  /**
   * The name of the heuristic to provide scores to.
   *
   * @generated from field: string heuristic = 1;
   */
  heuristic: string;

  /**
   * 
   * A map from hex-encoded public keys to scores. Scores must be in the range
   * [0.0, 1.0].
   *
   * @generated from field: map<string, double> scores = 2;
   */
  scores: { [key: string]: number };
};

/**
 * Describes the message autopilotrpc.SetScoresRequest.
 * Use `create(SetScoresRequestSchema)` to create a new message.
 */
export const SetScoresRequestSchema: GenMessage<SetScoresRequest> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 6);

/**
 * @generated from message autopilotrpc.SetScoresResponse
 */
export type SetScoresResponse = Message<"autopilotrpc.SetScoresResponse"> & {
};

/**
 * Describes the message autopilotrpc.SetScoresResponse.
 * Use `create(SetScoresResponseSchema)` to create a new message.
 */
export const SetScoresResponseSchema: GenMessage<SetScoresResponse> = /*@__PURE__*/
  messageDesc(file_autopilotrpc_autopilot, 7);

/**
 * Autopilot is a service that can be used to get information about the current
 * state of the daemon's autopilot agent, and also supply it with information
 * that can be used when deciding where to open channels.
 *
 * @generated from service autopilotrpc.Autopilot
 */
export const Autopilot: GenService<{
  /**
   * 
   * Status returns whether the daemon's autopilot agent is active.
   *
   * @generated from rpc autopilotrpc.Autopilot.Status
   */
  status: {
    methodKind: "unary";
    input: typeof StatusRequestSchema;
    output: typeof StatusResponseSchema;
  },
  /**
   * 
   * ModifyStatus is used to modify the status of the autopilot agent, like
   * enabling or disabling it.
   *
   * @generated from rpc autopilotrpc.Autopilot.ModifyStatus
   */
  modifyStatus: {
    methodKind: "unary";
    input: typeof ModifyStatusRequestSchema;
    output: typeof ModifyStatusResponseSchema;
  },
  /**
   * 
   * QueryScores queries all available autopilot heuristics, in addition to any
   * active combination of these heruristics, for the scores they would give to
   * the given nodes.
   *
   * @generated from rpc autopilotrpc.Autopilot.QueryScores
   */
  queryScores: {
    methodKind: "unary";
    input: typeof QueryScoresRequestSchema;
    output: typeof QueryScoresResponseSchema;
  },
  /**
   * 
   * SetScores attempts to set the scores used by the running autopilot agent,
   * if the external scoring heuristic is enabled.
   *
   * @generated from rpc autopilotrpc.Autopilot.SetScores
   */
  setScores: {
    methodKind: "unary";
    input: typeof SetScoresRequestSchema;
    output: typeof SetScoresResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_autopilotrpc_autopilot, 0);

